{"version":3,"sources":["util/AsyncComponent.js","app/App.jsx","util/rl/Dqn.js","app/game/util/TrainingComponent.js","app/controls/Controls.jsx","app/counter/Counter.jsx","app/game/Game.jsx","app/welcome-page/WelcomePage.jsx","app/game/frozen-lake/util/Action.js","util/rl/Transition.js","app/game/interface/GameComponent.js","app/game/frozen-lake/board/cell/Cell.jsx","app/game/frozen-lake/board/Board.jsx","app/game/frozen-lake/FrozenLake.jsx","app/game/tic-tac-toe/util/GameLogic.js","app/game/tic-tac-toe/board/Board.jsx","app/game/tic-tac-toe/TicTacToe.jsx","app/game/snake/Snake.jsx","index.jsx"],"names":["AsyncComponent","newState","Promise","resolve","setState","React","Component","appTitle","flexGrow","textAlign","marginRight","App","props","state","mainMenu","title","target","a","this","setStateAsync","AppBar","position","Toolbar","IconButton","size","edge","color","sx","mr","onClick","e","setMainMenu","currentTarget","Typography","variant","component","menuItems","key","params","push","MenuItem","Link","setTitle","to","route","content","Object","entries","MenuModel","Menu","id","open","Boolean","anchorEl","onClose","disableAutoFocusItem","menuBar","Dqn","bufferSize","gamma","layers","reset","mainModel","tf","layer","add","dense","compile","loss","optimizer","targetModel","updateTargetModel","replayBuffer","game","epsilon","stateAsTensor","epsilonGreedy","allowedActions","action","step","transition","storeTransition","i","weights","getWeights","setWeights","unshift","length","pop","actionSpace","Math","random","randIndex","floor","qValues","predict","argMax","dataSync","batchSize","miniBatch","targetQ","reward","done","targetValue","nextState","expected","arraySync","enumOrdinal","fit","epochs","shuffle","clonedBuffer","Set","randomIndex","mainPred","targetPred","data","maxAction","TrainingComponent","dqn","episodes","maxSteps","epsilonMax","epsilonMin","stepDelay","epsDecay","episode","currentEpisode","singleEpisode","exp","currentStep","sleep","forceUpdate","trainModel","updateTarget","ms","setTimeout","parseInt","Controls","mode","running","handleInputChange","bind","handleModeSelectChange","handlePlayButtonPress","handleResetButtonPress","value","type","checked","name","onModeSelect","onPlay","freeze","onReset","controlsElements","ControlsModel","el","label","tooltip","createLabel","createInput","labelText","labelFor","className","htmlFor","onChange","elementProps","createElement","defaultValue","disabled","max","min","createControlsForMode","Counter","style","clear","showCurrentStep","showCurrentEpisode","Game","controlMode","gameComponent","ref","current","controlState","singleStep","fullyTrain","WelcomePage","Action","enumKey","DOWN","UP","RIGHT","LEFT","console","error","ordinal","Enumify","_","closeEnum","Transition","GameComponent","actionOrdinal","Cell","StylesModel","classes","join","titles","populated","Board","cells","boardData","index","location","rowSize","FrozenLake","board","prevAction","opposite","stateX","stateY","fromOrdinal","prevState","includes","cell","oneHot","WIN_CONDITIONS","GameLogic","moves","row","j","player","map","col","every","move","TicTacToe","legalMoves","log","flattened","concat","numericValues","Snake","Index","frozenLakeRef","createRef","ticTacToeRef","snakeRef","homePath","components","frozenLake","ticTacToe","snake","routes","ParamsModel","path","url","element","dqnParams","exact","childRoutes","parentRoutes","routingTree","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.dd374df3.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class AsyncComponent extends React.Component {\n    /**\n     * Wrapper for React's setState function\n     * in an async context\n     * \n     * @param {*} newState \n     * @returns \n     */\n    setStateAsync(newState) {\n        return new Promise((resolve) => {\n            this.setState(newState, () => {\n                resolve();\n            });\n        });\n    }\n}","import React from 'react';\nimport AsyncComponent from '../util/AsyncComponent';\nimport { Outlet, Link } from \"react-router-dom\";\nimport { AppBar, Toolbar, Menu, MenuItem, IconButton, Typography } from '@mui/material';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport MenuModel from './Menu.json';\nimport './App.css';\n\nconst appTitle = {\n    flexGrow: 1,\n    textAlign: 'center',\n    marginRight: '2.5em'\n};\n\nexport default class App extends AsyncComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mainMenu: null,\n            title: 'Welcome'\n        }\n    }\n\n    async setMainMenu(target) {\n        await this.setStateAsync({mainMenu: target})\n    }\n\n    async setTitle(title) {\n        await this.setStateAsync({title});\n    }\n\n    menuBar() {\n        return <AppBar position=\"static\">\n            <Toolbar>\n                <IconButton\n                    size=\"large\"\n                    edge=\"start\"\n                    color=\"inherit\"\n                    aria-haspopup=\"true\"\n                    aria-controls=\"main-menu\"\n                    sx={{ mr: 2 }}\n                    onClick={e => this.setMainMenu(e.currentTarget)}\n                >\n                    <MenuIcon />\n                </IconButton>\n                <Typography variant=\"h5\" component=\"div\" sx={appTitle}>\n                    {this.state.title}\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    }\n\n    menuItems() {\n        const menuItems = [];\n        for (const [key, params] of Object.entries(MenuModel)) {\n            menuItems.push(<MenuItem\n                key={key}\n                component={Link}\n                onClick={async () => {\n                    await this.setMainMenu(null);\n                    await this.setTitle(params.title);\n                }}\n                to={params.route}\n            > {params.content}\n            </MenuItem>);\n        }\n        return menuItems;\n    }\n\n    mainMenu() {\n        return <Menu\n            id=\"main-menu\"\n            open={Boolean(this.state.mainMenu)}\n            anchorEl={this.state.mainMenu}\n            onClose={async () => await this.setMainMenu(null)}\n            disableAutoFocusItem\n        > {this.menuItems()}\n        </Menu>\n    }\n\n    render() {\n        return <div>\n            {this.menuBar()}\n            {this.mainMenu()}\n\n            <Outlet />\n        </div>\n    }\n}\n","/*eslint eqeqeq: \"off\"*/\nimport * as tf from '@tensorflow/tfjs';\n\nexport default class Dqn {\n    constructor(bufferSize, gamma, layers) {\n        this.bufferSize = bufferSize;\n        this.gamma = gamma;\n        this.layers = layers;\n        this.reset();\n    }\n\n    /**\n     * \n     */\n    reset() {\n        this.mainModel = tf.sequential();\n        for (const layer of this.layers) {\n            this.mainModel.add(tf.layers.dense(layer));\n        }\n        this.mainModel.compile({loss: 'meanSquaredError', optimizer: 'adam'});\n\n        this.targetModel = tf.sequential();\n        for (const layer of this.layers) {\n            this.targetModel.add(tf.layers.dense(layer));\n        }\n        this.updateTargetModel();\n        this.replayBuffer = [];\n    }\n\n    /**\n     * \n     * @param {*} game \n     * @param {*} epsilon \n     * @returns \n     */\n    async step(game, epsilon) {\n        const state = game.stateAsTensor();\n        const action = await this.epsilonGreedy(state, game.allowedActions(), epsilon);\n        const transition = await game.step(action);\n\n        this.storeTransition(transition);\n        return transition;\n    }\n\n    /**\n     * \n     */\n    updateTargetModel() {\n        for (const i in this.mainModel.layers) {\n            const weights = this.mainModel.layers[i].getWeights();\n            this.targetModel.layers[i].setWeights(weights);\n        }\n    }\n\n    /**\n     * \n     * @param {*} transition \n     */\n    storeTransition(transition) {\n        this.replayBuffer.unshift(transition);\n\n        if (this.replayBuffer.length === this.bufferSize + 1) {\n            this.replayBuffer.pop();\n        }\n    }\n\n    /**\n     * \n     * @param {*} state \n     * @param {*} actionSpace \n     * @param {*} epsilon \n     * @returns \n     */\n    async epsilonGreedy(state, actionSpace, epsilon) {\n        if (Math.random() < epsilon) {\n            const randIndex = Math.floor(Math.random() * actionSpace.length);\n            return actionSpace[randIndex];\n        }\n        const qValues = this.mainModel.predict(state);\n        const argMax = await qValues.argMax(-1).dataSync();\n\n        return argMax[0];\n    }\n\n    /**\n     * \n     * @param {*} batchSize \n     * @returns \n     */\n    async trainModel(batchSize) {\n        if (this.replayBuffer.length < batchSize) {\n            return;\n        }\n\n        for (const transition of this.miniBatch(batchSize)) {\n            let targetQ = transition.reward;\n            if (!transition.done) {\n                targetQ += this.gamma * this.targetValue(transition.nextState);\n            }\n\n            let expected = this.mainModel.predict(transition.state).arraySync();\n            expected[0][transition.action.enumOrdinal] = targetQ;\n\n            await this.mainModel.fit(transition.state, tf.tensor2d(expected), { epochs: 1, batchSize: 1, shuffle: false });\n        }\n    }\n\n    /**\n     * \n     * @param {*} batchSize \n     * @returns \n     */\n    miniBatch(batchSize) {\n        if (batchSize >= this.replayBuffer.length) {\n            let clonedBuffer = [...this.replayBuffer];\n            tf.util.shuffle(clonedBuffer);\n            return clonedBuffer;\n        }\n\n        const bufferSize = this.replayBuffer.length;\n        const miniBatch = new Set();\n\n        while (miniBatch.size != batchSize) {\n            const randomIndex = Math.floor(Math.random() * bufferSize);\n            miniBatch.add(this.replayBuffer[randomIndex]);\n        }\n        return miniBatch;\n    }\n\n    /**\n     * \n     * @param {*} nextState \n     * @returns \n     */\n    async targetValue(nextState) {\n        const mainPred = this.mainModel.predict(nextState);\n        const targetPred = this.targetModel.predict(nextState);\n        const maxAction = await mainPred.argMax(-1).data();\n\n        return targetPred.arraySync()[0][maxAction[0]];\n    }\n}","import AsyncComponent from \"../../../util/AsyncComponent\";\nimport Dqn from \"../../../util/rl/Dqn\";\n\nexport default class TrainingComponent extends AsyncComponent {\n    constructor(props) {\n        super(props);\n\n        const bufferSize = props.params.bufferSize;\n        const gamma = props.params.gamma;\n        const layers = props.params.layers;\n        this.dqn = new Dqn(bufferSize, gamma, layers);\n    }\n\n    /**\n     * Trains the DQN for a set number of epsiodes\n     * using the given parameters\n     * \n     * @param {number} episodes \n     * @param {number} maxSteps \n     * @param {number} batchSize \n     * @param {number} epsilonMax \n     * @param {number} epsilonMin \n     * @param {number} stepDelay \n     */\n    async fullyTrain(episodes, maxSteps, batchSize, epsilonMax, epsilonMin, stepDelay) {\n        const epsDecay = (epsilonMax - epsilonMin) / episodes;\n        let epsilon = epsilonMax;\n\n        for (let episode = 0; episode < episodes; episode ++) {\n            await this.setStateAsync({ currentEpisode: episode + 1 });\n            await this.singleEpisode(maxSteps, epsilon, batchSize, stepDelay);\n\n            if (epsilon > epsilonMin) {\n                epsilon = (epsilonMax - epsilonMin) * Math.exp(-epsDecay * episode) + epsilonMin;\n            }\n        }\n        this.dqn.updateTargetModel();\n    }\n\n    /**\n     * Performs a single episode in the DQN's training cycle\n     * using the given parameters\n     * \n     * @param {number} maxSteps \n     * @param {number} epsilon \n     * @param {number} batchSize \n     * @param {number} stepDelay \n     */\n    async singleEpisode(maxSteps, epsilon, batchSize, stepDelay) {\n        for (let step = 0; step < maxSteps; step ++) {\n            const transition = await this.dqn.step(this.game, epsilon);\n\n            await this.setStateAsync({ currentStep: step + 1 });\n            await this.sleep(stepDelay);\n            this.forceUpdate();\n\n            if (transition.done) {\n                break;\n            }\n        }\n        await this.game.reset();\n        await this.dqn.trainModel(batchSize);\n        this.dqn.updateTargetModel();\n    }\n\n    /**\n     * Completes a single step of the current episode\n     * of the DQN's training cycle using the given parameters\n     * \n     * @param {number} epsilon \n     * @param {number} updateTarget \n     * @param {number} batchSize \n     */\n    async singleStep(epsilon, updateTarget, batchSize) {\n        const step = await this.dqn.step(this.game, epsilon);\n        if (step.done) {\n            await this.game.reset();\n            await this.dqn.trainModel(batchSize);\n        }\n        if (updateTarget) {\n            this.dqn.updateTargetModel();\n        }\n    }\n\n    /**\n     * Resets the DQN to it's initial (untrained) state\n     */\n    reset() {\n        this.dqn.reset();\n    }\n\n    /**\n     * @param {number} ms The number of milliseconds to delay\n     */\n    sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, parseInt(ms)));\n    }\n}","import React from \"react\";\nimport AsyncComponent from \"../../util/AsyncComponent\";\nimport ControlsModel from './models/Controls.json';\nimport './Controls.css';\n\nexport default class Controls extends AsyncComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mode: 'step',\n            epsilon: 0.5,\n            epsilonMax: 1.0,\n            epsilonMin: 0.0,\n            maxSteps: 20,\n            updateTarget: false,\n            episodes: 1000,\n            batchSize: 32,\n            running: false,\n            stepDelay: 500\n        };\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleModeSelectChange = this.handleModeSelectChange.bind(this);\n        this.handlePlayButtonPress = this.handlePlayButtonPress.bind(this);\n        this.handleResetButtonPress = this.handleResetButtonPress.bind(this);\n    }\n\n    async handleInputChange(e) {\n        const target = e.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        await this.setStateAsync({ [name]: value });\n    }\n\n    async handleModeSelectChange(e) {\n        await this.handleInputChange(e);\n        await this.props.onModeSelect(this.state.mode);\n    }\n\n    async handlePlayButtonPress() {\n        await this.setStateAsync({ running: true });\n        await this.props.onPlay(Object.freeze({...this.state}));\n        await this.setStateAsync({ running: false });\n    }\n\n    async handleResetButtonPress() {\n        await this.setStateAsync({ \n            running: false, \n            currentStep: 0, \n            currentEpisode: 0 \n        });\n        await this.props.onReset();\n    }\n\n    createControlsForMode() {\n        const controlsElements = [];\n        for (const el of ControlsModel[this.state.mode]) {\n            const props = el.props;\n            const label = el.label;\n            const name = props.name;\n            const tooltip = props.title;\n\n            controlsElements.push(this.createLabel(label, name, tooltip));\n            controlsElements.push(this.createInput(props));\n        }\n\n        return <div id=\"mode-controls\">\n            {controlsElements}\n        </div>\n    }\n\n    createLabel(labelText, labelFor, tooltip) {\n        return <label \n            className=\"control\" \n            htmlFor={labelFor}\n            title={tooltip}\n            id={`${labelFor}-label`} \n            key={`${labelFor}-label`}>{`${labelText}:`}&nbsp;\n        </label>\n    }\n\n    createInput(props) {\n        const name = props.name;\n        const className = \"control labeled\";\n        const onChange = this.handleInputChange;\n        const value = this.state[name];\n        const key = name + '-input';\n\n        const elementProps = {\n            ...props, \n            className,\n            onChange,\n            value,\n            key\n        };\n        return React.createElement('input', elementProps);\n    }\n\n    render() {\n        return <div id=\"controls-box\">\n            <div id=\"static-controls\">\n                <select className=\"control\" id=\"mode-select\" name=\"mode\" title=\"Mode select\" \n                    onChange={this.handleModeSelectChange} defaultValue=\"step\">\n                    <option value=\"step\">Single Step</option>\n                    <option value=\"episode\">Single Episode</option>\n                    <option value=\"train\">Multiple Episodes</option>\n                </select>\n                <button \n                    className=\"control\" \n                    id=\"play-button\" \n                    title=\"Run\"\n                    disabled={this.state.running}\n                    onClick={this.handlePlayButtonPress}>▶\n                </button>\n                <button \n                    className=\"control\" \n                    id=\"reset-button\" \n                    title=\"Reset\" \n                    disabled={this.state.running}\n                    onClick={this.handleResetButtonPress}>↺\n                </button>\n                <label\n                    className=\"control\"\n                    htmlFor=\"stepDelay\"\n                    id=\"step-delay-label\"\n                    title=\"Delay between steps (ms)\">Delay:&nbsp;\n                </label>\n                <input \n                    className=\"control labeled\"\n                    name=\"stepDelay\"\n                    id=\"stepDelay\"\n                    title=\"Delay between steps (ms)\"\n                    onChange={this.handleInputChange}\n                    value={this.state.stepDelay}\n                    type=\"number\"\n                    max=\"5000\"\n                    min=\"100\"\n                    step=\"100\">\n                </input>\n            </div>\n            {this.createControlsForMode()}\n        </div>\n    }\n}","import React from 'react';\nimport './Counter.css';\n\nexport default class Counter extends React.Component {\n    showCurrentStep() {\n        const mode = this.props.mode;\n        if (mode === 'episode' || mode === 'train') {\n            return <h3 id=\"counter-step\">Step: {this.props.step}</h3>\n        }\n    }\n\n    showCurrentEpisode() {\n        if (this.props.mode === 'train') {\n            return <h3 id=\"counter-episode\">Episode: {this.props.episode}</h3>\n        }\n    }\n\n    render() {\n        return <div style={{clear: 'both'}} id=\"counter-counts\">\n            {this.showCurrentStep()}\n            {this.showCurrentEpisode()}\n        </div>\n    }\n}","import TrainingComponent from './util/TrainingComponent';\nimport Controls from '../controls/Controls';\nimport Counter from '../counter/Counter';\nimport './Game.css';\n\nexport default class Game extends TrainingComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = { \n            currentStep: 0, \n            currentEpisode: 0, \n            controlMode: 'step' \n        };\n        this.onPlay = this.onPlay.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onModeSelect = this.onModeSelect.bind(this);\n    }\n\n    componentDidMount() {\n        const gameComponent = this.props.component;\n        this.game = gameComponent.ref.current;\n    }\n\n    /**\n     * \n     * @param {*} controlState \n     */\n    async onPlay(controlState) {\n        switch (controlState.mode) {\n            case 'step':\n                await this.singleStep(\n                    controlState.epsilon, \n                    controlState.updateTarget, \n                    controlState.batchSize\n                );\n                break;\n\n            case 'episode':\n                await this.singleEpisode(\n                    controlState.maxSteps, \n                    controlState.epsilon, \n                    controlState.batchSize,\n                    controlState.stepDelay\n                );\n                break;\n\n            case 'train':\n                await this.fullyTrain(\n                    controlState.episodes, \n                    controlState.maxSteps, \n                    controlState.batchSize, \n                    controlState.epsilonMax, \n                    controlState.epsilonMin,\n                    controlState.stepDelay\n                );\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * \n     */\n    async onReset() {\n        await this.setStateAsync({ \n            currentStep: 0, \n            currentEpisode: 0 \n        });\n        await this.game.reset();\n        this.reset();\n    }\n\n    /**\n     * \n     * @param {*} mode \n     */\n    async onModeSelect(mode) {\n        await this.setStateAsync({ \n            currentStep: 0, \n            currentEpisode: 0,\n            controlMode: mode\n        });\n        await this.game.reset();\n    }\n\n    render() {\n        return <div>\n            <div id=\"game-controls-container\">\n                <Controls \n                    onPlay={this.onPlay} \n                    onReset={this.onReset} \n                    onModeSelect={this.onModeSelect}\n                />\n            </div>\n            <div id=\"game-container\">\n                {this.props.component}\n            </div>\n            <div id=\"game-counter-container\">\n                <Counter \n                    mode={this.state.controlMode} \n                    step={this.state.currentStep} \n                    episode={this.state.currentEpisode} \n                />\n            </div>\n        </div>\n    }\n}","import React from \"react\";\nimport './WelcomePage.css';\n\nexport default class WelcomePage extends React.Component {\n    render() {\n        return <div id=\"welcome\">\n            <h1>Welcome!</h1>\n        </div>\n    }\n}","import { Enumify } from \"enumify\";\n\nexport default class Action extends Enumify {\n    static UP = new Action();\n    static DOWN = new Action();\n    static LEFT = new Action();\n    static RIGHT = new Action();\n    static _ = this.closeEnum();\n\n    opposite() {\n        switch (this.enumKey) {\n            case 'UP': \n                return Action.DOWN;\n            case 'DOWN':\n                return Action.UP;\n            case 'LEFT':\n                return Action.RIGHT;\n            case 'RIGHT':\n                return Action.LEFT;\n            default:\n                console.error(`Action '${this.enumKey}' doesn't have an opposite`);\n                break;\n        }\n    }\n\n    static fromOrdinal(ordinal) {\n        switch (ordinal) {\n            case Action.UP.enumOrdinal:\n                return Action.UP;\n            case Action.DOWN.enumOrdinal:\n                return Action.DOWN;\n            case Action.LEFT.enumOrdinal:\n                return Action.LEFT;\n            case Action.RIGHT.enumOrdinal:\n                return Action.RIGHT;\n            default:\n                console.error(`Not an Action: ${ordinal}`);\n                break;\n        }\n    }\n}\n","export default class Transition {\n    constructor(action, state, reward, done, nextState, allowedActions) {\n        this.action = action;\n        this.state = state;\n        this.reward = reward;\n        this.done = done;\n        this.nextState = nextState;\n        this.allowedActions = allowedActions;\n    }\n}","import AsyncComponent from \"../../../util/AsyncComponent\";\n\nexport default class GameComponent extends AsyncComponent {\n    /**\n     * Set game to intial state\n     */\n    async reset() {}\n\n    /**\n     * @returns Array of ordinal values for each \n     * action allowed in the game's current state\n     */\n    allowedActions() {}\n\n    /**\n     * Move from the current state to the next state\n     * after applying the action that corresponds to\n     * the given rodinal value\n     * \n     * @param {number} actionOrdinal Numeric value\n     * that decodes into a legal action\n     */\n    async step(actionOrdinal) {}\n\n    /**\n     * @returns Current game state transformed \n     * into a 2d tensor\n     */\n    stateAsTensor() {}\n}","import React from 'react';\nimport StylesModel from './models/Styles.json';\nimport './Cell.css';\n\nexport default class Cell extends React.Component {\n    render() {\n        const type = this.props.type;\n        const className = [StylesModel.classes[type] || '', 'cell-grid-item'].join(' ');\n        const tooltip = StylesModel.titles[type];\n        const content = (this.props.populated && '웃') || type;\n\n        return <div className={className} title={tooltip}>{content}</div>\n    }\n}","import React from 'react';\nimport Cell from './cell/Cell';\nimport './Board.css';\n\nexport default class Board extends React.Component {\n    render() {\n        const cells = [];\n        for (const i in this.props.boardData) {\n            const type = this.props.boardData[i];\n            const index = parseInt(i);\n            const populated = index  === this.props.location;\n            \n            cells.push(<Cell type={type} populated={populated} key={i} />);\n            if ((index + 1) % this.props.rowSize === 0) {\n                cells.push(<br key={`${i}-br`} />)\n            }\n        }\n        return <div id=\"board-grid\">\n            {cells}\n        </div>\n    }\n}","import React from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport Action from './util/Action';\nimport Transition from '../../../util/rl/Transition';\nimport GameComponent from '../interface/GameComponent';\nimport Board from './board/Board';\nimport './FrozenLake.css';\n\nexport default class FrozenLake extends GameComponent {\n    /**\n     * Corresponding character values\n     * displayed in each of the board's cells\n     */\n    board = Object.freeze([\n        'S', 'F', 'F', 'F',\n        'F', 'H', 'F', 'H',\n        'F', 'F', 'F', 'H',\n        'H', 'F', 'F', 'G'\n    ]);\n\n    constructor(props) {\n        super(props);\n\n        this.state = { location: 0 };\n        this.prevAction = Action.RIGHT; \n    }\n\n    async reset() {\n        await this.setStateAsync({ location: 0 });\n        this.prevAction = Action.RIGHT\n    }\n\n    allowedActions() {\n        const opposite = this.prevAction.opposite();\n        const location = this.state.location;\n        \n        const stateX = location % 4;\n        const stateY = Math.floor(location / 4);\n\n        const allowedActions = [];\n\n        if (stateX > 0 && opposite !== Action.LEFT) {\n            allowedActions.push(Action.LEFT.enumOrdinal);\n        }\n        if (stateX < 3 && opposite !== Action.RIGHT) {\n            allowedActions.push(Action.RIGHT.enumOrdinal);\n        }\n        if (stateY > 0 && opposite !== Action.UP) {\n            allowedActions.push(Action.UP.enumOrdinal);\n        }\n        if (stateY < 3 && opposite !== Action.DOWN) {\n            allowedActions.push(Action.DOWN.enumOrdinal);\n        }\n        return allowedActions;\n    }\n\n    async step(actionOrdinal) {\n        const action = Action.fromOrdinal(actionOrdinal);\n        const prevState = this.stateAsTensor();\n        const allowedActions = this.allowedActions();\n\n        if (!allowedActions.includes(actionOrdinal)) {\n            return new Transition(action, prevState, -1, true, prevState, allowedActions);\n        }\n        const location = this.state.location;\n        let stateX = location % 4;\n        let stateY = Math.floor(location / 4);\n\n        switch (action) {\n            case Action.UP:\n                stateY --;\n                break;\n\n            case Action.DOWN:\n                stateY ++;\n                break;\n\n            case Action.LEFT:\n                stateX --;\n                break;\n\n            case Action.RIGHT:\n                stateX ++;\n                break;\n            \n            default:\n                break;\n        }\n        await this.setStateAsync({ location: stateY * 4 + stateX });\n        this.prevAction = action;\n\n        return new Transition(action, prevState, this.reward(), this.done(), this.stateAsTensor(), allowedActions);\n    }\n\n    /**\n     * @returns Reward value the actor recieves\n     * after moving to the current cell\n     */\n    reward() {\n        const location = this.state.location;\n        switch (this.board[location]) {\n            case 'G':\n                return 1;\n            case 'H':\n                return -1;\n            case 'F':\n            case 'S':\n            default:\n                return 0;\n        }\n    }\n\n    /**\n     * @returns 'true' if the actor has hit \n     * a 'goal' or 'hole' cell, false otherwise\n     */\n    done() {\n        const location = this.state.location;\n        const cell = this.board[location];\n        return cell === 'G' || cell === 'H';\n    }\n\n    stateAsTensor() {\n        const oneHot = [\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0\n        ];\n        const location = this.state.location;\n        oneHot[location] = 1;\n        \n        return tf.tensor2d([oneHot]);\n    }\n\n    render() {\n        return <Board boardData={this.board} location={this.state.location} rowSize={4} />\n    }\n}","const WIN_CONDITIONS = [\n    [[0, 0], [0, 1], [0, 2]],\n    [[1, 0], [1, 1], [1, 2]],\n    [[2, 0], [2, 1], [2, 2]],\n\n    [[0, 0], [1, 0], [2, 0]],\n    [[0, 1], [1, 1], [2, 1]],\n    [[0, 2], [1, 2], [2, 2]],\n\n    [[0, 0], [1, 1], [2, 2]],\n    [[0, 2], [1, 1], [2, 0]]\n]\n\nexport default class GameLogic {\n    constructor(board) {\n        this.board = board || [\n            [' ', ' ', ' '],\n            [' ', ' ', ' '],\n            [' ', ' ', ' ']\n        ];\n    }\n\n    /**\n     * \n     */\n    reset() {\n        this.board = [\n            [' ', ' ', ' '],\n            [' ', ' ', ' '],\n            [' ', ' ', ' ']\n        ];\n    }\n\n    /**\n     * \n     */\n    legalMoves() {\n        const moves = [];\n        for (const [i, row] in Object.entries(this.board)) {\n            for (const [j, cell] in Object.entries(row)) {\n                if (cell === ' ') {\n                    moves.push([i, j]);\n                }\n            }\n        }\n        return moves;\n    }\n\n    /**\n     * \n     * @param {*} player \n     * @returns \n     */\n    isWinner(player) {\n        for (const winCondition of WIN_CONDITIONS) {\n            const winCells = winCondition.map(value => {\n                const row = value[0];\n                const col = value[1];\n                return this.board[row][col] === player;\n            });\n\n            if (winCells.every(value => value)) {\n                return true; \n            }\n        }\n        return false;\n    }\n\n    /**\n     * \n     * @param {*} move \n     * @param {*} player \n     */\n    makeMove(move, player) {\n        const row = move[0];\n        const col = move[1];\n        this.board[row][col] = player;\n    }\n\n    /**\n     * \n     * @returns \n     */\n    clone() {\n        return new GameLogic([\n            [...this.board[0]],\n            [...this.board[1]],\n            [...this.board[2]]\n        ]);\n    }\n}","import React from 'react';\nimport './Board.css';\n\nexport default class Board extends React.Component {\n    row(index) {\n        const row = this.props.cells[index];\n        return <tr>\n            <td className=\"board-cell\">{row[0]}</td>\n            <td className=\"board-cell\">{row[1]}</td>\n            <td className=\"board-cell\">{row[2]}</td>\n        </tr>\n    }\n\n    render() {\n        return <table>\n            <tbody>\n                {this.row(0)}\n                {this.row(1)}\n                {this.row(2)}\n            </tbody>\n        </table>\n    }\n}","import GameComponent from '../interface/GameComponent';\nimport GameLogic from './util/GameLogic';\nimport Board from './board/Board';\nimport * as tf from '@tensorflow/tfjs';\nimport './TicTacToe.css';\n\nexport default class TicTacToe extends GameComponent {\n    constructor(props) {\n        super(props);\n\n        this.game = new GameLogic();\n        this.state = {\n            cells: this.game.board\n        };\n    }\n\n    async reset() {\n        this.game.reset();\n        await this.setStateAsync({ cells: this.game.board });\n    }\n\n    allowedActions() {\n        return this.game.legalMoves().map(move => move[0] * 3 + move[1]);\n    }\n\n    async step(action) {\n        console.log(action);\n    }\n\n    stateAsTensor() {\n        const flattened = this.game.board[0]\n            .concat(this.game.board[1])\n            .concat(this.game.board[2]);\n\n            const numericValues = {\n                ' ': 0,\n                'X': 1,\n                'O': 2\n            };\n            return tf.tensor2d([\n                flattened.map(value => numericValues[value])\n            ]);\n    }\n\n    render() {\n        return <Board cells={this.state.cells}></Board>\n    }\n}","import GameComponent from '../interface/GameComponent';\nimport './Snake.css';\n\nexport default class Snake extends GameComponent {\n    render() {\n        return <div id=\"snake\">\n            <h1>Snake</h1>\n        </div>\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport App from './app/App';\nimport Game from './app/game/Game';\nimport WelcomePage from './app/welcome-page/WelcomePage';\nimport FrozenLake from './app/game/frozen-lake/FrozenLake';\nimport TicTacToe from './app/game/tic-tac-toe/TicTacToe';\nimport Snake from './app/game/snake/Snake';\nimport ParamsModel from './models/Params.json';\nimport './index.css';\n\nclass Index extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.frozenLakeRef = React.createRef();\n        this.ticTacToeRef = React.createRef();\n        this.snakeRef = React.createRef();\n    }\n\n    childRoutes(homePath) {\n        const components = {\n            frozenLake: <FrozenLake ref={this.frozenLakeRef} />,\n            ticTacToe: <TicTacToe ref={this.ticTacToeRef} />,\n            snake: <Snake ref={this.snakeRef} />\n        };\n\n        const routes = [];\n        for (const [key, params] of Object.entries(ParamsModel)) {\n            routes.push(<Route \n                key={key}\n                path={homePath + params.url} \n                element={<Game\n                    params={params.dqnParams}\n                    component={components[key]}\n                />}\n            />);\n        }\n        return routes;\n    }\n\n    routingTree(homePath, index) {\n        return <Route exact path={homePath} element={<App />} key={index}>\n            <Route path={homePath} element={<WelcomePage />} />\n            {this.childRoutes(homePath)}\n        </Route>\n    }\n\n    render() {\n        return <BrowserRouter>\n            <Routes>\n                {ParamsModel.parentRoutes.map((path, index) => \n                    this.routingTree(path, index)\n                )}\n            </Routes>\n        </BrowserRouter>\n    }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<Index />, rootElement);\n"],"sourceRoot":""}