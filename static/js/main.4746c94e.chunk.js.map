{"version":3,"sources":["util/Sleep.js","util/AsyncComponent.js","util/Step.js","util/rl/Dqn.js","app/controls/Controls.jsx","app/cell/Cell.jsx","app/frozen-lake/FrozenLake.jsx","app/App.jsx","index.jsx"],"names":["sleep","ms","Promise","resolve","setTimeout","parseInt","AsyncComponent","newState","setState","React","Component","Transition","action","state","reward","done","nextState","allowedActions","this","Action","enumKey","DOWN","UP","RIGHT","LEFT","console","error","ordinal","Enumify","_","closeEnum","Dqn","bufferSize","gamma","reset","mainModel","tf","add","dense","units","inputShape","activation","compile","loss","optimizer","targetModel","updateTargetModel","replayBuffer","game","epsilon","a","stateAsTensor","epsilonGreedy","step","transition","storeTransition","i","layers","weights","getWeights","setWeights","unshift","length","pop","actionSpace","Math","random","randIndex","floor","qValues","predict","argMax","dataSync","fromOrdinal","batchSize","miniBatch","targetQ","targetValue","expected","arraySync","enumOrdinal","fit","epochs","shuffle","clonedBuffer","Set","size","randomIndex","mainPred","targetPred","data","maxAction","Controls","props","mode","epsilonMax","epsilonMin","maxSteps","updateTarget","episodes","running","stepDelay","handleInputChange","bind","handleModeSelectChange","handlePlayButtonPress","handleResetButtonPress","e","target","value","type","checked","name","setStateAsync","onModeSelect","onPlay","Object","freeze","currentStep","currentEpisode","onReset","controlsElements","ControlsModel","el","label","tooltip","title","push","createLabel","createInput","id","labelText","labelFor","className","htmlFor","onChange","key","elementProps","createElement","defaultValue","disabled","onClick","max","min","createControlsForMode","Cell","StylesModel","classes","join","titles","content","populated","FrozenLake","board","location","prevAction","opposite","stateX","stateY","prevState","includes","cell","oneHot","cells","App","controlMode","gameRef","createRef","current","dqn","ParamsModel","controlState","singleStep","singleEpisode","fullyTrain","epsDecay","episode","exp","forceUpdate","trainModel","ref","showCurrentStep","showCurrentEpisode","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4746c94e.chunk.js","sourcesContent":["export default function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, parseInt(ms)));\n  }","import React from \"react\";\n\nexport default class AsyncComponent extends React.Component {\n    setStateAsync(newState) {\n        return new Promise((resolve) => {\n            this.setState(newState, () => {\n                resolve();\n            });\n        });\n    }\n}","import { Enumify } from \"enumify\";\n\nclass Transition {\n    constructor(action, state, reward, done, nextState, allowedActions) {\n        this.action = action;\n        this.state = state;\n        this.reward = reward;\n        this.done = done;\n        this.nextState = nextState;\n        this.allowedActions = allowedActions;\n    }\n}\n\nclass Action extends Enumify {\n    static UP = new Action();\n    static DOWN = new Action();\n    static LEFT = new Action();\n    static RIGHT = new Action();\n    static _ = this.closeEnum();\n\n    opposite() {\n        switch (this.enumKey) {\n            case 'UP': \n                return Action.DOWN;\n            case 'DOWN':\n                return Action.UP;\n            case 'LEFT':\n                return Action.RIGHT;\n            case 'RIGHT':\n                return Action.LEFT;\n            default:\n                console.error(`Action '${this.enumKey}' doesn't have an opposite`);\n                break;\n        }\n    }\n\n    static fromOrdinal(ordinal) {\n        switch (ordinal) {\n            case 0:\n                return Action.UP;\n            case 1:\n                return Action.DOWN;\n            case 2:\n                return Action.LEFT;\n            case 3:\n                return Action.RIGHT;\n            default:\n                console.error(`Not an Action: ${ordinal}`);\n                break;\n        }\n    }\n}\n\nexport {\n    Transition, Action\n}","/*eslint eqeqeq: \"off\"*/\n\nimport * as tf from '@tensorflow/tfjs';\nimport { Action } from '../Step';\n\nexport default class Dqn {\n    constructor(bufferSize, gamma) {\n        this.bufferSize = bufferSize;\n        this.gamma = gamma;\n        this.reset();\n    }\n\n    reset() {\n        this.mainModel = tf.sequential();\n        this.mainModel.add(tf.layers.dense({units: 4, inputShape: 16, activation: 'relu'}));\n        this.mainModel.compile({loss: 'meanSquaredError', optimizer: 'adam'});\n\n        this.targetModel = tf.sequential();\n        this.targetModel.add(tf.layers.dense({units: 4, inputShape: 16, activation: 'relu'}));\n\n        this.updateTargetModel();\n        this.replayBuffer = [];\n    }\n\n    async step(game, epsilon) {\n        const state = game.stateAsTensor();\n        const action = await this.epsilonGreedy(state, game.allowedActions(), epsilon);\n        const transition = await game.step(action);\n\n        this.storeTransition(transition);\n        return transition;\n    }\n\n    updateTargetModel() {\n        for (const i in this.mainModel.layers) {\n            const weights = this.mainModel.layers[i].getWeights();\n            this.targetModel.layers[i].setWeights(weights);\n        }\n    }\n\n    storeTransition(transition) {\n        this.replayBuffer.unshift(transition);\n\n        if (this.replayBuffer.length === this.bufferSize + 1) {\n            this.replayBuffer.pop();\n        }\n    }\n\n    async epsilonGreedy(state, actionSpace, epsilon) {\n        if (Math.random() < epsilon) {\n            const randIndex = Math.floor(Math.random() * actionSpace.length);\n            return actionSpace[randIndex];\n        }\n        const qValues = this.mainModel.predict(state);\n        const argMax = await qValues.argMax(-1).dataSync();\n\n        return Action.fromOrdinal(argMax[0]);\n    }\n\n    async trainModel(batchSize) {\n        if (this.replayBuffer.length < batchSize) {\n            return;\n        }\n\n        for (const transition of this.miniBatch(batchSize)) {\n            let targetQ = transition.reward;\n            if (!transition.done) {\n                targetQ += this.gamma * this.targetValue(transition.nextState);\n            }\n\n            let expected = this.mainModel.predict(transition.state).arraySync();\n            expected[0][transition.action.enumOrdinal] = targetQ;\n\n            await this.mainModel.fit(transition.state, tf.tensor2d(expected), { epochs: 1, batchSize: 1, shuffle: false });\n        }\n    }\n\n    miniBatch(batchSize) {\n        if (batchSize >= this.replayBuffer.length) {\n            let clonedBuffer = [...this.replayBuffer];\n            tf.util.shuffle(clonedBuffer);\n            return clonedBuffer;\n        }\n\n        const bufferSize = this.replayBuffer.length;\n        let miniBatch = new Set();\n\n        while (miniBatch.size != batchSize) {\n            const randomIndex = Math.floor(Math.random() * bufferSize);\n            miniBatch.add(this.replayBuffer[randomIndex]);\n        }\n        return miniBatch;\n    }\n\n    async targetValue(nextState) {\n        const mainPred = this.mainModel.predict(nextState);\n        const targetPred = this.targetModel.predict(nextState);\n        const maxAction = await mainPred.argMax(-1).data();\n\n        return targetPred.arraySync()[0][maxAction[0]];\n    }\n}","import React from \"react\";\nimport AsyncComponent from \"../../util/AsyncComponent\";\nimport ControlsModel from './models/Controls.json';\nimport './Controls.css';\n\nexport default class Controls extends AsyncComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mode: 'step',\n            epsilon: 0.5,\n            epsilonMax: 1.0,\n            epsilonMin: 0.0,\n            maxSteps: 20,\n            updateTarget: false,\n            episodes: 1000,\n            batchSize: 32,\n            running: false,\n            stepDelay: 500\n        };\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleModeSelectChange = this.handleModeSelectChange.bind(this);\n        this.handlePlayButtonPress = this.handlePlayButtonPress.bind(this);\n        this.handleResetButtonPress = this.handleResetButtonPress.bind(this);\n    }\n\n    async handleInputChange(e) {\n        const target = e.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        await this.setStateAsync({ [name]: value });\n    }\n\n    async handleModeSelectChange(e) {\n        await this.handleInputChange(e);\n        await this.props.onModeSelect(this.state.mode);\n    }\n\n    async handlePlayButtonPress() {\n        await this.setStateAsync({ running: true });\n        await this.props.onPlay(Object.freeze({...this.state}));\n        await this.setStateAsync({ running: false });\n    }\n\n    async handleResetButtonPress() {\n        await this.setStateAsync({ \n            running: false, \n            currentStep: 0, \n            currentEpisode: 0 \n        });\n        await this.props.onReset();\n    }\n\n    createControlsForMode() {\n        let controlsElements = [];\n        for (const el of ControlsModel[this.state.mode]) {\n            const props = el.props;\n            const label = el.label;\n            const name = props.name;\n            const tooltip = props.title;\n\n            controlsElements.push(this.createLabel(label, name, tooltip));\n            controlsElements.push(this.createInput(props));\n        }\n\n        return <div id=\"mode-controls\">\n            {controlsElements}\n        </div>\n    }\n\n    createLabel(labelText, labelFor, tooltip) {\n        return <label \n                className=\"control\" \n                htmlFor={labelFor}\n                title={tooltip}\n                id={labelFor + '-label'} \n                key={labelFor + \"-label\"}>{labelText + ':'}&nbsp;\n            </label>\n    }\n\n    createInput(props) {\n        const name = props.name;\n        const className = \"control labeled\";\n        const onChange = this.handleInputChange;\n        const value = this.state[name];\n        const key = name + '-input';\n\n        let elementProps = {\n            ...props, \n            className,\n            onChange,\n            value,\n            key\n        };\n        return React.createElement('input', elementProps);\n    }\n\n    render() {\n        return <div id=\"controls-box\">\n                <div id=\"static-controls\">\n                    <select className=\"control\" id=\"mode-select\" name=\"mode\" title=\"Mode select\" \n                        onChange={this.handleModeSelectChange} defaultValue=\"step\">\n                        <option value=\"step\">Single Step</option>\n                        <option value=\"episode\">Single Episode</option>\n                        <option value=\"train\">Multiple Episodes</option>\n                    </select>\n                    <button \n                        className=\"control\" \n                        id=\"play-button\" \n                        title=\"Run\"\n                        disabled={this.state.running}\n                        onClick={this.handlePlayButtonPress}>▶\n                    </button>\n                    <button \n                        className=\"control\" \n                        id=\"reset-button\" \n                        title=\"Reset\" \n                        disabled={this.state.running}\n                        onClick={this.handleResetButtonPress}>↺\n                    </button>\n                    <label\n                        className=\"control\"\n                        htmlFor=\"stepDelay\"\n                        id=\"step-delay-label\"\n                        title=\"Delay between steps (ms)\">Delay:&nbsp;\n                    </label>\n                    <input \n                        className=\"control labeled\"\n                        name=\"stepDelay\"\n                        id=\"stepDelay\"\n                        title=\"Delay between steps (ms)\"\n                        onChange={this.handleInputChange}\n                        value={this.state.stepDelay}\n                        type=\"number\"\n                        max=\"5000\"\n                        min=\"100\"\n                        step=\"100\">\n                    </input>\n                </div>\n                {this.createControlsForMode()}\n            </div>\n    }\n}","import React from 'react';\nimport StylesModel from './models/Styles.json';\nimport './Cell.css';\n\nexport default class Cell extends React.Component {\n    render() {\n        const type = this.props.type;\n        const className = [StylesModel.classes[type] || '', 'grid-item'].join(' ');\n        const tooltip = StylesModel.titles[type];\n        const content = (this.props.populated && '웃') || type;\n\n        return <div className={className} title={tooltip}>{content}</div>\n    }\n}","/*eslint eqeqeq: \"off\"*/\n\nimport * as tf from '@tensorflow/tfjs';\nimport React from 'react';\nimport { Action, Transition } from '../../util/Step';\nimport AsyncComponent from '../../util/AsyncComponent';\nimport Cell from '../cell/Cell';\nimport './FrozenLake.css';\n\nexport default class FrozenLake extends AsyncComponent {\n    board = Object.freeze([\n        'S', 'F', 'F', 'F',\n        'F', 'H', 'F', 'H',\n        'F', 'F', 'F', 'H',\n        'H', 'F', 'F', 'G'\n    ]);\n\n    constructor(props) {\n        super(props);\n\n        this.state = { location: 0 };\n        this.prevAction = Action.RIGHT; \n    }\n\n    componentDidMount() {}\n    componentWillUnmount() {}\n\n    async reset() {\n        await this.setStateAsync({ location: 0 });\n        this.prevAction = Action.RIGHT\n    }\n\n    allowedActions() {\n        let opposite = this.prevAction.opposite();\n        let location = this.state.location;\n        \n        let stateX = location % 4;\n        let stateY = Math.floor(location / 4);\n\n        let allowedActions = [];\n\n        if (stateX > 0 && opposite !== Action.LEFT) {\n            allowedActions.push(Action.LEFT);\n        }\n        if (stateX < 3 && opposite !== Action.RIGHT) {\n            allowedActions.push(Action.RIGHT);\n        }\n        if (stateY > 0 && opposite !== Action.UP) {\n            allowedActions.push(Action.UP);\n        }\n        if (stateY < 3 && opposite !== Action.DOWN) {\n            allowedActions.push(Action.DOWN);\n        }\n        return allowedActions;\n    }\n\n    async step(action) {\n        let prevState = this.stateAsTensor();\n        let allowedActions = this.allowedActions();\n\n        if (!allowedActions.includes(action)) {\n            return new Transition(action, prevState, -1, true, prevState, allowedActions);\n        }\n        let location = this.state.location;\n        let stateX = location % 4;\n        let stateY = Math.floor(location / 4);\n\n        switch (action) {\n            case Action.UP:\n                stateY --;\n                break;\n\n            case Action.DOWN:\n                stateY ++;\n                break;\n\n            case Action.LEFT:\n                stateX --;\n                break;\n\n            case Action.RIGHT:\n                stateX ++;\n                break;\n            \n            default:\n                break;\n        }\n        await this.setStateAsync({ location: stateY * 4 + stateX });\n        this.prevAction = action;\n\n        return new Transition(action, prevState, this.reward(), this.done(), this.stateAsTensor(), allowedActions);\n    }\n\n    reward() {\n        let location = this.state.location;\n        switch (this.board[location]) {\n            case 'G':\n                return 1;\n            case 'H':\n                return -1;\n            case 'F':\n            case 'S':\n            default:\n                return 0;\n        }\n    }\n\n    done() {\n        let location = this.state.location;\n        let cell = this.board[location];\n        return cell === 'G' || cell === 'H';\n    }\n\n    stateAsTensor() {\n        let oneHot = [\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0\n        ];\n        let location = this.state.location;\n        oneHot[location] = 1;\n        \n        return tf.tensor2d([oneHot]);\n    }\n\n    render() {\n        let cells = [];\n        for (const i in this.board) {\n            const type = this.board[i];\n            const populated = i == this.state.location;\n            \n            cells.push(<Cell type={type} populated={populated} key={i} />);\n            if ((parseInt(i) + 1) % 4 === 0) {\n                cells.push(<br key={i + '-br'} />)\n            }\n        }\n        return <div id=\"frozen-lake-grid\">\n            {cells}\n        </div>\n    }\n}","import React from 'react';\nimport ParamsModel from './models/Params.json';\nimport sleep from '../util/Sleep';\nimport AsyncComponent from '../util/AsyncComponent';\nimport Dqn from '../util/rl/Dqn';\nimport Controls from './controls/Controls';\nimport FrozenLake from './frozen-lake/FrozenLake';\nimport './App.css';\n\nexport default class App extends AsyncComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = { \n            currentStep: 0, \n            currentEpisode: 0, \n            controlMode: 'step' \n        };\n        this.gameRef = React.createRef();\n        \n        this.onPlay = this.onPlay.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onModeSelect = this.onModeSelect.bind(this);\n    }\n\n    componentDidMount() {\n        this.game = this.gameRef.current;\n        this.dqn = new Dqn(ParamsModel.bufferSize, ParamsModel.gamma);\n    }\n\n    async onPlay(controlState) {\n        switch (controlState.mode) {\n            case 'step':\n                await this.singleStep(\n                    controlState.epsilon, \n                    controlState.updateTarget, \n                    controlState.batchSize\n                );\n                break;\n\n            case 'episode':\n                await this.singleEpisode(\n                    controlState.maxSteps, \n                    controlState.epsilon, \n                    controlState.batchSize,\n                    controlState.stepDelay\n                );\n                break;\n\n            case 'train':\n                await this.fullyTrain(\n                    controlState.episodes, \n                    controlState.maxSteps, \n                    controlState.batchSize, \n                    controlState.epsilonMax, \n                    controlState.epsilonMin,\n                    controlState.stepDelay\n                );\n                this.dqn.updateTargetModel();\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    async onReset() {\n        await this.setStateAsync({ \n            currentStep: 0, \n            currentEpisode: 0 \n        });\n        await this.game.reset();\n        this.dqn.reset();\n    }\n\n    async onModeSelect(mode) {\n        await this.setStateAsync({ \n            currentStep: 0, \n            currentEpisode: 0,\n            controlMode: mode\n        });\n        await this.game.reset();\n    }\n\n    async fullyTrain(episodes, maxSteps, batchSize, epsilonMax, epsilonMin, stepDelay) {\n        const epsDecay = (epsilonMax - epsilonMin) / episodes;\n        let epsilon = epsilonMax;\n\n        for (let episode = 0; episode < episodes; episode ++) {\n            await this.setStateAsync({ currentEpisode: episode + 1 });\n            await this.singleEpisode(maxSteps, epsilon, batchSize, stepDelay);\n\n            if (epsilon > epsilonMin) {\n                epsilon = (epsilonMax - epsilonMin) * Math.exp(-epsDecay * episode) + epsilonMin;\n            }\n        }\n    }\n\n    async singleEpisode(maxSteps, epsilon, batchSize, stepDelay) {\n        for (let step = 0; step < maxSteps; step ++) {\n            const transition = await this.dqn.step(this.game, epsilon);\n\n            await this.setStateAsync({ currentStep: step + 1 });\n            await sleep(stepDelay);\n            this.forceUpdate();\n\n            if (transition.done) {\n                break;\n            }\n        }\n        await this.game.reset();\n        await this.dqn.trainModel(batchSize);\n        this.dqn.updateTargetModel();\n    }\n\n    async singleStep(epsilon, updateTarget, batchSize) {\n        const step = await this.dqn.step(this.game, epsilon);\n\n        if (step.done) {\n            await this.game.reset();\n            await this.dqn.trainModel(batchSize);\n        }\n        if (updateTarget) {\n            this.dqn.updateTargetModel();\n        }\n    }\n\n    showCurrentStep() {\n        const mode = this.state.controlMode;\n        if (mode === 'episode' || mode === 'train') {\n            return <h3>Step: {this.state.currentStep}</h3>\n        }\n    }\n\n    showCurrentEpisode() {\n        if (this.state.controlMode === 'train') {\n            return <h3>Episode: {this.state.currentEpisode}</h3>\n        }\n    }\n\n    render() {\n        return <div>\n            <div id=\"controls-container\">\n                <Controls onPlay={this.onPlay} onReset={this.onReset} onModeSelect={this.onModeSelect}/>\n            </div>\n            <div id=\"game-container\">\n                <FrozenLake ref={this.gameRef} />\n            </div>\n            <div id=\"count-container\">\n                {this.showCurrentStep()}\n                {this.showCurrentEpisode()}\n            </div>\n        </div>\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}