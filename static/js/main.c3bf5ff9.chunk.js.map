{"version":3,"sources":["app/App.jsx","util/AsyncComponent.js","app/controls/Controls.jsx","app/counter/Counter.jsx","util/Step.js","util/rl/Dqn.js","util/Sleep.js","util/rl/Trainer.js","app/game/Game.jsx","app/game/frozen-lake/board/cell/Cell.jsx","app/game/frozen-lake/board/Board.jsx","app/game/frozen-lake/FrozenLake.jsx","index.jsx"],"names":["App","id","to","React","Component","AsyncComponent","newState","Promise","resolve","setState","Controls","props","state","mode","epsilon","epsilonMax","epsilonMin","maxSteps","updateTarget","episodes","batchSize","running","stepDelay","handleInputChange","bind","handleModeSelectChange","handlePlayButtonPress","handleResetButtonPress","e","a","target","value","type","checked","name","this","setStateAsync","onModeSelect","onPlay","Object","freeze","currentStep","currentEpisode","onReset","controlsElements","ControlsModel","el","label","tooltip","title","push","createLabel","createInput","labelText","labelFor","className","htmlFor","onChange","key","elementProps","createElement","defaultValue","disabled","onClick","max","min","step","createControlsForMode","Counter","episode","style","clear","showCurrentStep","showCurrentEpisode","Transition","action","reward","done","nextState","allowedActions","Action","enumKey","DOWN","UP","RIGHT","LEFT","console","error","ordinal","Enumify","_","closeEnum","Dqn","bufferSize","gamma","layers","reset","mainModel","tf","layer","add","dense","compile","loss","optimizer","targetModel","updateTargetModel","replayBuffer","game","stateAsTensor","epsilonGreedy","transition","storeTransition","i","weights","getWeights","setWeights","unshift","length","pop","actionSpace","Math","random","randIndex","floor","qValues","predict","argMax","dataSync","fromOrdinal","miniBatch","targetQ","targetValue","expected","arraySync","enumOrdinal","fit","epochs","shuffle","clonedBuffer","Set","size","randomIndex","mainPred","targetPred","data","maxAction","sleep","ms","setTimeout","parseInt","Trainer","dqn","component","epsDecay","singleEpisode","exp","forceUpdate","trainModel","Game","controlMode","params","ref","current","trainer","controlState","singleStep","fullyTrain","Cell","StylesModel","classes","join","titles","content","populated","Board","cells","boardData","index","location","rowSize","FrozenLake","board","prevAction","opposite","stateX","stateY","prevState","includes","cell","oneHot","Index","frozenLakeRef","createRef","exact","path","element","ParamsModel","frozenLake","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.c3bf5ff9.chunk.js","sourcesContent":["import React from 'react';\nimport { Outlet, Link } from \"react-router-dom\";\nimport './App.css';\n\nexport default class App extends React.Component {\n    render() {\n        return <div>\n            <h1>Games To Learn</h1>\n            <nav id=\"app-nav\">\n                <Link to=\"/frozen-lake\">Frozen Lake</Link>\n            </nav>\n            <Outlet />\n        </div>\n    }\n}","import React from 'react';\n\nexport default class AsyncComponent extends React.Component {\n    setStateAsync(newState) {\n        return new Promise((resolve) => {\n            this.setState(newState, () => {\n                resolve();\n            });\n        });\n    }\n}","import React from \"react\";\nimport AsyncComponent from \"../../util/AsyncComponent\";\nimport ControlsModel from './models/Controls.json';\nimport './Controls.css';\n\nexport default class Controls extends AsyncComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mode: 'step',\n            epsilon: 0.5,\n            epsilonMax: 1.0,\n            epsilonMin: 0.0,\n            maxSteps: 20,\n            updateTarget: false,\n            episodes: 1000,\n            batchSize: 32,\n            running: false,\n            stepDelay: 500\n        };\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleModeSelectChange = this.handleModeSelectChange.bind(this);\n        this.handlePlayButtonPress = this.handlePlayButtonPress.bind(this);\n        this.handleResetButtonPress = this.handleResetButtonPress.bind(this);\n    }\n\n    async handleInputChange(e) {\n        const target = e.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        await this.setStateAsync({ [name]: value });\n    }\n\n    async handleModeSelectChange(e) {\n        await this.handleInputChange(e);\n        await this.props.onModeSelect(this.state.mode);\n    }\n\n    async handlePlayButtonPress() {\n        await this.setStateAsync({ running: true });\n        await this.props.onPlay(Object.freeze({...this.state}));\n        await this.setStateAsync({ running: false });\n    }\n\n    async handleResetButtonPress() {\n        await this.setStateAsync({ \n            running: false, \n            currentStep: 0, \n            currentEpisode: 0 \n        });\n        await this.props.onReset();\n    }\n\n    createControlsForMode() {\n        let controlsElements = [];\n        for (const el of ControlsModel[this.state.mode]) {\n            const props = el.props;\n            const label = el.label;\n            const name = props.name;\n            const tooltip = props.title;\n\n            controlsElements.push(this.createLabel(label, name, tooltip));\n            controlsElements.push(this.createInput(props));\n        }\n\n        return <div id=\"mode-controls\">\n            {controlsElements}\n        </div>\n    }\n\n    createLabel(labelText, labelFor, tooltip) {\n        return <label \n                className=\"control\" \n                htmlFor={labelFor}\n                title={tooltip}\n                id={`${labelFor}-label`} \n                key={`${labelFor}-label`}>{`${labelText}:`}&nbsp;\n            </label>\n    }\n\n    createInput(props) {\n        const name = props.name;\n        const className = \"control labeled\";\n        const onChange = this.handleInputChange;\n        const value = this.state[name];\n        const key = name + '-input';\n\n        let elementProps = {\n            ...props, \n            className,\n            onChange,\n            value,\n            key\n        };\n        return React.createElement('input', elementProps);\n    }\n\n    render() {\n        return <div id=\"controls-box\">\n                <div id=\"static-controls\">\n                    <select className=\"control\" id=\"mode-select\" name=\"mode\" title=\"Mode select\" \n                        onChange={this.handleModeSelectChange} defaultValue=\"step\">\n                        <option value=\"step\">Single Step</option>\n                        <option value=\"episode\">Single Episode</option>\n                        <option value=\"train\">Multiple Episodes</option>\n                    </select>\n                    <button \n                        className=\"control\" \n                        id=\"play-button\" \n                        title=\"Run\"\n                        disabled={this.state.running}\n                        onClick={this.handlePlayButtonPress}>▶\n                    </button>\n                    <button \n                        className=\"control\" \n                        id=\"reset-button\" \n                        title=\"Reset\" \n                        disabled={this.state.running}\n                        onClick={this.handleResetButtonPress}>↺\n                    </button>\n                    <label\n                        className=\"control\"\n                        htmlFor=\"stepDelay\"\n                        id=\"step-delay-label\"\n                        title=\"Delay between steps (ms)\">Delay:&nbsp;\n                    </label>\n                    <input \n                        className=\"control labeled\"\n                        name=\"stepDelay\"\n                        id=\"stepDelay\"\n                        title=\"Delay between steps (ms)\"\n                        onChange={this.handleInputChange}\n                        value={this.state.stepDelay}\n                        type=\"number\"\n                        max=\"5000\"\n                        min=\"100\"\n                        step=\"100\">\n                    </input>\n                </div>\n                {this.createControlsForMode()}\n            </div>\n    }\n}","import React from 'react';\nimport './Counter.css';\n\nexport default class Counter extends React.Component {\n    showCurrentStep() {\n        const mode = this.props.mode;\n        if (mode === 'episode' || mode === 'train') {\n            return <h3 id=\"counter-step\">Step: {this.props.step}</h3>\n        }\n    }\n\n    showCurrentEpisode() {\n        if (this.props.mode === 'train') {\n            return <h3 id=\"counter-episode\">Episode: {this.props.episode}</h3>\n        }\n    }\n\n    render() {\n        return <div style={{clear: 'both'}} id=\"counter-counts\">\n            {this.showCurrentStep()}\n            {this.showCurrentEpisode()}\n        </div>\n    }\n}","import { Enumify } from \"enumify\";\n\nclass Transition {\n    constructor(action, state, reward, done, nextState, allowedActions) {\n        this.action = action;\n        this.state = state;\n        this.reward = reward;\n        this.done = done;\n        this.nextState = nextState;\n        this.allowedActions = allowedActions;\n    }\n}\n\nclass Action extends Enumify {\n    static UP = new Action();\n    static DOWN = new Action();\n    static LEFT = new Action();\n    static RIGHT = new Action();\n    static _ = this.closeEnum();\n\n    opposite() {\n        switch (this.enumKey) {\n            case 'UP': \n                return Action.DOWN;\n            case 'DOWN':\n                return Action.UP;\n            case 'LEFT':\n                return Action.RIGHT;\n            case 'RIGHT':\n                return Action.LEFT;\n            default:\n                console.error(`Action '${this.enumKey}' doesn't have an opposite`);\n                break;\n        }\n    }\n\n    static fromOrdinal(ordinal) {\n        switch (ordinal) {\n            case 0:\n                return Action.UP;\n            case 1:\n                return Action.DOWN;\n            case 2:\n                return Action.LEFT;\n            case 3:\n                return Action.RIGHT;\n            default:\n                console.error(`Not an Action: ${ordinal}`);\n                break;\n        }\n    }\n}\n\nexport {\n    Transition, Action\n}","/*eslint eqeqeq: \"off\"*/\n\nimport * as tf from '@tensorflow/tfjs';\nimport { Action } from '../Step';\n\nexport default class Dqn {\n    constructor(bufferSize, gamma, layers) {\n        this.bufferSize = bufferSize;\n        this.gamma = gamma;\n        this.layers = layers;\n        this.reset();\n    }\n\n    reset() {\n        this.mainModel = tf.sequential();\n        for (const layer of this.layers) {\n            this.mainModel.add(tf.layers.dense(layer));\n        }\n        this.mainModel.compile({loss: 'meanSquaredError', optimizer: 'adam'});\n\n        this.targetModel = tf.sequential();\n        for (const layer of this.layers) {\n            this.targetModel.add(tf.layers.dense(layer));\n        }\n        this.updateTargetModel();\n        this.replayBuffer = [];\n    }\n\n    async step(game, epsilon) {\n        const state = game.stateAsTensor();\n        const action = await this.epsilonGreedy(state, game.allowedActions(), epsilon);\n        const transition = await game.step(action);\n\n        this.storeTransition(transition);\n        return transition;\n    }\n\n    updateTargetModel() {\n        for (const i in this.mainModel.layers) {\n            const weights = this.mainModel.layers[i].getWeights();\n            this.targetModel.layers[i].setWeights(weights);\n        }\n    }\n\n    storeTransition(transition) {\n        this.replayBuffer.unshift(transition);\n\n        if (this.replayBuffer.length === this.bufferSize + 1) {\n            this.replayBuffer.pop();\n        }\n    }\n\n    async epsilonGreedy(state, actionSpace, epsilon) {\n        if (Math.random() < epsilon) {\n            const randIndex = Math.floor(Math.random() * actionSpace.length);\n            return actionSpace[randIndex];\n        }\n        const qValues = this.mainModel.predict(state);\n        const argMax = await qValues.argMax(-1).dataSync();\n\n        return Action.fromOrdinal(argMax[0]);\n    }\n\n    async trainModel(batchSize) {\n        if (this.replayBuffer.length < batchSize) {\n            return;\n        }\n\n        for (const transition of this.miniBatch(batchSize)) {\n            let targetQ = transition.reward;\n            if (!transition.done) {\n                targetQ += this.gamma * this.targetValue(transition.nextState);\n            }\n\n            let expected = this.mainModel.predict(transition.state).arraySync();\n            expected[0][transition.action.enumOrdinal] = targetQ;\n\n            await this.mainModel.fit(transition.state, tf.tensor2d(expected), { epochs: 1, batchSize: 1, shuffle: false });\n        }\n    }\n\n    miniBatch(batchSize) {\n        if (batchSize >= this.replayBuffer.length) {\n            let clonedBuffer = [...this.replayBuffer];\n            tf.util.shuffle(clonedBuffer);\n            return clonedBuffer;\n        }\n\n        const bufferSize = this.replayBuffer.length;\n        let miniBatch = new Set();\n\n        while (miniBatch.size != batchSize) {\n            const randomIndex = Math.floor(Math.random() * bufferSize);\n            miniBatch.add(this.replayBuffer[randomIndex]);\n        }\n        return miniBatch;\n    }\n\n    async targetValue(nextState) {\n        const mainPred = this.mainModel.predict(nextState);\n        const targetPred = this.targetModel.predict(nextState);\n        const maxAction = await mainPred.argMax(-1).data();\n\n        return targetPred.arraySync()[0][maxAction[0]];\n    }\n}","export default function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, parseInt(ms)));\n  }","import Dqn from './Dqn';\nimport sleep from '../Sleep'\n\nexport default class Trainer {\n    constructor(bufferSize, gamma, layers) {\n        this.dqn = new Dqn(bufferSize, gamma, layers);\n    }\n\n    async fullyTrain(component, episodes, maxSteps, batchSize, epsilonMax, epsilonMin, stepDelay) {\n        const epsDecay = (epsilonMax - epsilonMin) / episodes;\n        let epsilon = epsilonMax;\n\n        for (let episode = 0; episode < episodes; episode ++) {\n            await component.setStateAsync({ currentEpisode: episode + 1 });\n            await this.singleEpisode(component, maxSteps, epsilon, batchSize, stepDelay);\n\n            if (epsilon > epsilonMin) {\n                epsilon = (epsilonMax - epsilonMin) * Math.exp(-epsDecay * episode) + epsilonMin;\n            }\n        }\n        this.dqn.updateTargetModel();\n    }\n\n    async singleEpisode(component, maxSteps, epsilon, batchSize, stepDelay) {\n        for (let step = 0; step < maxSteps; step ++) {\n            const transition = await this.dqn.step(component.game, epsilon);\n\n            await component.setStateAsync({ currentStep: step + 1 });\n            await sleep(stepDelay);\n            component.forceUpdate();\n\n            if (transition.done) {\n                break;\n            }\n        }\n        await component.game.reset();\n        await this.dqn.trainModel(batchSize);\n        this.dqn.updateTargetModel();\n    }\n\n    async singleStep(component, epsilon, updateTarget, batchSize) {\n        const step = await this.dqn.step(component.game, epsilon);\n\n        if (step.done) {\n            await component.game.reset();\n            await this.dqn.trainModel(batchSize);\n        }\n        if (updateTarget) {\n            this.dqn.updateTargetModel();\n        }\n    }\n\n    reset() {\n        this.dqn.reset();\n    }\n}","import AsyncComponent from '../../util/AsyncComponent';\nimport Controls from '../controls/Controls';\nimport Counter from '../counter/Counter';\nimport Trainer from '../../util/rl/Trainer';\nimport './Game.css';\n\nexport default class Game extends AsyncComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = { \n            currentStep: 0, \n            currentEpisode: 0, \n            controlMode: 'step' \n        };\n        this.onPlay = this.onPlay.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onModeSelect = this.onModeSelect.bind(this);\n    }\n\n    componentDidMount() {\n        const params = this.props.params;\n        this.game = this.props.component.ref.current;\n        this.trainer = new Trainer(params.bufferSize, params.gamma, params.layers);\n    }\n\n    async onPlay(controlState) {\n        switch (controlState.mode) {\n            case 'step':\n                await this.trainer.singleStep(this,\n                    controlState.epsilon, \n                    controlState.updateTarget, \n                    controlState.batchSize\n                );\n                break;\n\n            case 'episode':\n                await this.trainer.singleEpisode(this,\n                    controlState.maxSteps, \n                    controlState.epsilon, \n                    controlState.batchSize,\n                    controlState.stepDelay\n                );\n                break;\n\n            case 'train':\n                await this.trainer.fullyTrain(this,\n                    controlState.episodes, \n                    controlState.maxSteps, \n                    controlState.batchSize, \n                    controlState.epsilonMax, \n                    controlState.epsilonMin,\n                    controlState.stepDelay\n                );\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    async onReset() {\n        await this.setStateAsync({ \n            currentStep: 0, \n            currentEpisode: 0 \n        });\n        await this.game.reset();\n        this.trainer.reset();\n    }\n\n    async onModeSelect(mode) {\n        await this.setStateAsync({ \n            currentStep: 0, \n            currentEpisode: 0,\n            controlMode: mode\n        });\n        await this.game.reset();\n    }\n\n    render() {\n        return <div>\n            <div id=\"game-controls-container\">\n                <Controls \n                    onPlay={this.onPlay} \n                    onReset={this.onReset} \n                    onModeSelect={this.onModeSelect}\n                />\n            </div>\n            <div id=\"game-container\">\n                {this.props.component}\n            </div>\n            <div id=\"game-counter-container\">\n                <Counter \n                    mode={this.state.controlMode} \n                    step={this.state.currentStep} \n                    episode={this.state.currentEpisode} \n                />\n            </div>\n        </div>\n    }\n}","import React from 'react';\nimport StylesModel from './models/Styles.json';\nimport './Cell.css';\n\nexport default class Cell extends React.Component {\n    render() {\n        const type = this.props.type;\n        const className = [StylesModel.classes[type] || '', 'cell-grid-item'].join(' ');\n        const tooltip = StylesModel.titles[type];\n        const content = (this.props.populated && '웃') || type;\n\n        return <div className={className} title={tooltip}>{content}</div>\n    }\n}","import React from 'react';\nimport Cell from './cell/Cell';\nimport './Board.css';\n\nexport default class Board extends React.Component {\n    render() {\n        let cells = [];\n        for (const i in this.props.boardData) {\n            const type = this.props.boardData[i];\n            const index = parseInt(i);\n            const populated = index  === this.props.location;\n            \n            cells.push(<Cell type={type} populated={populated} key={i} />);\n            if ((index + 1) % this.props.rowSize === 0) {\n                cells.push(<br key={`${i}-br`} />)\n            }\n        }\n        return <div id=\"board-grid\">\n            {cells}\n        </div>\n    }\n}","import * as tf from '@tensorflow/tfjs';\nimport React from 'react';\nimport { Action, Transition } from '../../../util/Step';\nimport AsyncComponent from '../../../util/AsyncComponent';\nimport Board from './board/Board';\nimport './FrozenLake.css';\n\nexport default class FrozenLake extends AsyncComponent {\n    board = Object.freeze([\n        'S', 'F', 'F', 'F',\n        'F', 'H', 'F', 'H',\n        'F', 'F', 'F', 'H',\n        'H', 'F', 'F', 'G'\n    ]);\n\n    constructor(props) {\n        super(props);\n\n        this.state = { location: 0 };\n        this.prevAction = Action.RIGHT; \n    }\n\n    componentDidMount() {}\n    componentWillUnmount() {}\n\n    async reset() {\n        await this.setStateAsync({ location: 0 });\n        this.prevAction = Action.RIGHT\n    }\n\n    allowedActions() {\n        let opposite = this.prevAction.opposite();\n        let location = this.state.location;\n        \n        let stateX = location % 4;\n        let stateY = Math.floor(location / 4);\n\n        let allowedActions = [];\n\n        if (stateX > 0 && opposite !== Action.LEFT) {\n            allowedActions.push(Action.LEFT);\n        }\n        if (stateX < 3 && opposite !== Action.RIGHT) {\n            allowedActions.push(Action.RIGHT);\n        }\n        if (stateY > 0 && opposite !== Action.UP) {\n            allowedActions.push(Action.UP);\n        }\n        if (stateY < 3 && opposite !== Action.DOWN) {\n            allowedActions.push(Action.DOWN);\n        }\n        return allowedActions;\n    }\n\n    async step(action) {\n        let prevState = this.stateAsTensor();\n        let allowedActions = this.allowedActions();\n\n        if (!allowedActions.includes(action)) {\n            return new Transition(action, prevState, -1, true, prevState, allowedActions);\n        }\n        let location = this.state.location;\n        let stateX = location % 4;\n        let stateY = Math.floor(location / 4);\n\n        switch (action) {\n            case Action.UP:\n                stateY --;\n                break;\n\n            case Action.DOWN:\n                stateY ++;\n                break;\n\n            case Action.LEFT:\n                stateX --;\n                break;\n\n            case Action.RIGHT:\n                stateX ++;\n                break;\n            \n            default:\n                break;\n        }\n        await this.setStateAsync({ location: stateY * 4 + stateX });\n        this.prevAction = action;\n\n        return new Transition(action, prevState, this.reward(), this.done(), this.stateAsTensor(), allowedActions);\n    }\n\n    reward() {\n        let location = this.state.location;\n        switch (this.board[location]) {\n            case 'G':\n                return 1;\n            case 'H':\n                return -1;\n            case 'F':\n            case 'S':\n            default:\n                return 0;\n        }\n    }\n\n    done() {\n        let location = this.state.location;\n        let cell = this.board[location];\n        return cell === 'G' || cell === 'H';\n    }\n\n    stateAsTensor() {\n        let oneHot = [\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0\n        ];\n        let location = this.state.location;\n        oneHot[location] = 1;\n        \n        return tf.tensor2d([oneHot]);\n    }\n\n    render() {\n        return <Board boardData={this.board} location={this.state.location} rowSize={4} />\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport App from './app/App';\nimport Game from './app/game/Game';\nimport FrozenLake from './app/game/frozen-lake/FrozenLake';\nimport ParamsModel from './models/Params.json';\nimport './index.css';\n\nclass Index extends React.Component {\n    constructor(props) {\n        super(props);\n        this.frozenLakeRef = React.createRef();\n    }\n\n    render() {\n        return <BrowserRouter>\n            <Routes>\n                <Route exact path=\"/\" element={<App />} />\n                <Route exact path=\"/interactive-dqn\" element={<App />} />\n                <Route exact path=\"/frozen-lake\" element={\n                    <Game\n                        params={ParamsModel.frozenLake}\n                        component={<FrozenLake ref={this.frozenLakeRef}/>}\n                    />}\n                />\n            </Routes>\n        </BrowserRouter>\n    }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Index />, rootElement);\n"],"sourceRoot":""}