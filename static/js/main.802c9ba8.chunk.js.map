{"version":3,"sources":["game/util/Step.js","util/AsyncComponent.js","game/FrozenLake.jsx","game/util/rl/Dqn.js","util/Sleep.js","App.jsx","index.jsx"],"names":["Transition","action","state","reward","done","nextState","allowedActions","this","Action","enumKey","DOWN","UP","RIGHT","LEFT","console","error","ordinal","Enumify","_","closeEnum","AsyncComponent","newState","Promise","resolve","setState","React","Component","FrozenLake","props","board","Object","freeze","location","prevAction","a","setStateAsync","opposite","stateX","stateY","Math","floor","push","prevState","stateAsTensor","includes","cell","oneHot","tf","cells","i","className","styleData","classes","title","titles","content","parseInt","id","Dqn","bufferSize","gamma","reset","mainModel","add","dense","units","inputShape","activation","compile","loss","optimizer","targetModel","updateTargetModel","replayBuffer","game","epsilon","epsilonGreedy","step","transition","storeTransition","layers","weights","getWeights","setWeights","unshift","length","pop","actionSpace","random","randIndex","qValues","predict","argMax","dataSync","fromOrdinal","batchSize","miniBatch","targetQ","targetValue","expected","arraySync","enumOrdinal","fit","epochs","shuffle","clonedBuffer","Set","size","randomIndex","mainPred","targetPred","data","maxAction","sleep","ms","setTimeout","App","gameRef","createRef","mode","epsilonMax","epsilonMin","maxSteps","updateTarget","episodes","running","currentStep","currentEpisode","stepDelay","handleInputChange","bind","handleModeSelectChange","handlePlayButtonPress","handleResetButtonPress","current","dqn","params","resetNetwork","e","target","value","type","checked","name","singleStep","singleEpisode","fullyTrain","epsDecay","episode","exp","forceUpdate","trainModel","controlsElements","controls","el","label","tooltip","createLabel","createInput","labelText","labelFor","htmlFor","onChange","key","elementProps","createElement","defaultValue","disabled","onClick","max","min","createControlsForMode","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.802c9ba8.chunk.js","sourcesContent":["import { Enumify } from \"enumify\";\n\nclass Transition {\n    constructor(action, state, reward, done, nextState, allowedActions) {\n        this.action = action;\n        this.state = state;\n        this.reward = reward;\n        this.done = done;\n        this.nextState = nextState;\n        this.allowedActions = allowedActions;\n    }\n}\n\nclass Action extends Enumify {\n    static UP = new Action();\n    static DOWN = new Action();\n    static LEFT = new Action();\n    static RIGHT = new Action();\n    static _ = this.closeEnum();\n\n    opposite() {\n        switch (this.enumKey) {\n            case 'UP': \n                return Action.DOWN;\n            case 'DOWN':\n                return Action.UP;\n            case 'LEFT':\n                return Action.RIGHT;\n            case 'RIGHT':\n                return Action.LEFT;\n            default:\n                console.error(`Action '${this.enumKey}' doesn't have an opposite`);\n                break;\n        }\n    }\n\n    static fromOrdinal(ordinal) {\n        switch (ordinal) {\n            case 0:\n                return Action.UP;\n            case 1:\n                return Action.DOWN;\n            case 2:\n                return Action.LEFT;\n            case 3:\n                return Action.RIGHT;\n            default:\n                console.error(`Not an Action: ${ordinal}`);\n                break;\n        }\n    }\n}\n\nexport {\n    Transition, Action\n}","import React from \"react\";\n\nexport default class AsyncComponent extends React.Component {\n    setStateAsync(newState) {\n        return new Promise((resolve) => {\n            this.setState(newState, () => {\n                resolve();\n            });\n        });\n    }\n}","/*eslint eqeqeq: \"off\"*/\n\nimport React from 'react';\nimport './FrozenLake.css';\nimport { Action, Transition } from './util/Step.js'\nimport * as tf from '@tensorflow/tfjs';\nimport styleData from './models/StyleData.json';\nimport AsyncComponent from '../util/AsyncComponent';\n\nexport default class FrozenLake extends AsyncComponent {\n    board = Object.freeze([\n        'S', 'F', 'F', 'F',\n        'F', 'H', 'F', 'H',\n        'F', 'F', 'F', 'H',\n        'H', 'F', 'F', 'G'\n    ]);\n\n    constructor(props) {\n        super(props);\n\n        this.state = { location: 0 };\n        this.prevAction = Action.RIGHT; \n    }\n\n    componentDidMount() {}\n    componentWillUnmount() {}\n\n    async reset() {\n        await this.setStateAsync({ location: 0 });\n        this.prevAction = Action.RIGHT\n    }\n\n    allowedActions() {\n        let opposite = this.prevAction.opposite();\n        let location = this.state.location;\n        let stateX = location % 4;\n        let stateY = Math.floor(location / 4);\n\n        let allowedActions = [];\n\n        if (stateX > 0 && opposite !== Action.LEFT) {\n            allowedActions.push(Action.LEFT);\n        }\n        if (stateX < 3 && opposite !== Action.RIGHT) {\n            allowedActions.push(Action.RIGHT);\n        }\n        if (stateY > 0 && opposite !== Action.UP) {\n            allowedActions.push(Action.UP);\n        }\n        if (stateY < 3 && opposite !== Action.DOWN) {\n            allowedActions.push(Action.DOWN);\n        }\n        return allowedActions;\n    }\n\n    async step(action) {\n        let prevState = this.stateAsTensor();\n        let allowedActions = this.allowedActions();\n\n        if (!allowedActions.includes(action)) {\n            return new Transition(action, prevState, -1, true, prevState, allowedActions);\n        }\n        let location = this.state.location;\n        let stateX = location % 4;\n        let stateY = Math.floor(location / 4);\n\n        switch (action) {\n            case Action.UP:\n                stateY --;\n                break;\n\n            case Action.DOWN:\n                stateY ++;\n                break;\n\n            case Action.LEFT:\n                stateX --;\n                break;\n\n            case Action.RIGHT:\n                stateX ++;\n                break;\n            \n            default:\n                break;\n        }\n        await this.setStateAsync({ location: stateY * 4 + stateX });\n        this.prevAction = action;\n\n        return new Transition(action, prevState, this.reward(), this.done(), this.stateAsTensor(), allowedActions);\n    }\n\n    reward() {\n        let location = this.state.location;\n        switch (this.board[location]) {\n            case 'G':\n                return 1;\n            case 'H':\n                return -1;\n            case 'F':\n            case 'S':\n            default:\n                return 0;\n        }\n    }\n\n    done() {\n        let location = this.state.location;\n        let cell = this.board[location];\n        return cell === 'G' || cell === 'H';\n    }\n\n    stateAsTensor() {\n        let oneHot = [\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0\n        ];\n        let location = this.state.location;\n        oneHot[location] = 1;\n        \n        return tf.tensor2d([oneHot]);\n    }\n\n    render() {\n        let cells = [];\n        for (const i in this.board) {\n            const cell = this.board[i];\n            const className = styleData.classes[cell] + \" grid-item\";\n            const title = styleData.titles[cell];\n\n            let content;\n            if (i == this.state.location) {\n                content = '웃';\n            }\n            else {\n                content = cell;\n            }\n\n            cells.push(<div className={className} title={title} key={i}>{content}</div>);\n            if ((parseInt(i) + 1) % 4 === 0) {\n                cells.push(<br key={i + '-br'} />)\n            }\n        }\n        return <div id=\"frozen-lake-grid\">\n            {cells}\n        </div>\n    }\n}","/*eslint eqeqeq: \"off\"*/\n\nimport * as tf from '@tensorflow/tfjs';\nimport { Action } from '../Step';\n\nexport default class Dqn {\n    constructor(bufferSize, gamma) {\n        this.bufferSize = bufferSize;\n        this.gamma = gamma;\n        this.reset();\n    }\n\n    reset() {\n        this.mainModel = tf.sequential();\n        this.mainModel.add(tf.layers.dense({units: 4, inputShape: 16, activation: 'relu'}));\n        this.mainModel.compile({loss: 'meanSquaredError', optimizer: 'adam'});\n\n        this.targetModel = tf.sequential();\n        this.targetModel.add(tf.layers.dense({units: 4, inputShape: 16, activation: 'relu'}));\n\n        this.updateTargetModel();\n        this.replayBuffer = [];\n    }\n\n    async step(game, epsilon) {\n        const state = game.stateAsTensor();\n        const action = await this.epsilonGreedy(state, game.allowedActions(), epsilon);\n        const transition = await game.step(action);\n\n        this.storeTransition(transition);\n        return transition;\n    }\n\n    updateTargetModel() {\n        for (const i in this.mainModel.layers) {\n            const weights = this.mainModel.layers[i].getWeights();\n            this.targetModel.layers[i].setWeights(weights);\n        }\n    }\n\n    storeTransition(transition) {\n        this.replayBuffer.unshift(transition);\n\n        if (this.replayBuffer.length === this.bufferSize + 1) {\n            this.replayBuffer.pop();\n        }\n    }\n\n    async epsilonGreedy(state, actionSpace, epsilon) {\n        if (Math.random() < epsilon) {\n            const randIndex = Math.floor(Math.random() * actionSpace.length);\n            return actionSpace[randIndex];\n        }\n        const qValues = this.mainModel.predict(state);\n        const argMax = await qValues.argMax(-1).dataSync();\n\n        return Action.fromOrdinal(argMax[0]);\n    }\n\n    async trainModel(batchSize) {\n        if (this.replayBuffer.length < batchSize) {\n            return;\n        }\n\n        for (const transition of this.miniBatch(batchSize)) {\n            let targetQ = transition.reward;\n            if (!transition.done) {\n                targetQ += this.gamma * this.targetValue(transition.nextState);\n            }\n\n            let expected = this.mainModel.predict(transition.state).arraySync();\n            expected[0][transition.action.enumOrdinal] = targetQ;\n\n            await this.mainModel.fit(transition.state, tf.tensor2d(expected), { epochs: 1, batchSize: 1, shuffle: false });\n        }\n    }\n\n    miniBatch(batchSize) {\n        if (batchSize >= this.replayBuffer.length) {\n            let clonedBuffer = [...this.replayBuffer];\n            tf.util.shuffle(clonedBuffer);\n            return clonedBuffer;\n        }\n\n        const bufferSize = this.replayBuffer.length;\n        let miniBatch = new Set();\n\n        while (miniBatch.size != batchSize) {\n            const randomIndex = Math.floor(Math.random() * bufferSize);\n            miniBatch.add(this.replayBuffer[randomIndex]);\n        }\n        return miniBatch;\n    }\n\n    async targetValue(nextState) {\n        const mainPred = this.mainModel.predict(nextState);\n        const targetPred = this.targetModel.predict(nextState);\n        const maxAction = await mainPred.argMax(-1).data();\n\n        return targetPred.arraySync()[0][maxAction[0]];\n    }\n}","export default function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, parseInt(ms)));\n  }","import React from 'react';\nimport './App.css';\nimport FrozenLake from './game/FrozenLake';\nimport Dqn from './game/util/rl/Dqn';\nimport controls from './models/Controls.json';\nimport params from './models/Params.json';\nimport sleep from './util/Sleep';\nimport AsyncComponent from './util/AsyncComponent';\n\nexport default class App extends AsyncComponent {\n    constructor(props) {\n        super(props);\n\n        this.gameRef = React.createRef();\n        this.state = {\n            mode: 'step',\n            epsilon: 0.5,\n            epsilonMax: 1.0,\n            epsilonMin: 0.0,\n            maxSteps: 20,\n            updateTarget: false,\n            episodes: 1000,\n            batchSize: 32,\n            running: false,\n            currentStep: 0,\n            currentEpisode: 0,\n            stepDelay: 500\n        };\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleModeSelectChange = this.handleModeSelectChange.bind(this);\n        this.handlePlayButtonPress = this.handlePlayButtonPress.bind(this);\n        this.handleResetButtonPress = this.handleResetButtonPress.bind(this);\n    }\n\n    componentDidMount() {\n        this.game = this.gameRef.current;\n        this.dqn = new Dqn(params.bufferSize, params.gamma);\n    }\n\n    async reset(resetNetwork) {\n        await this.setStateAsync({ \n            running: false, \n            currentStep: 0, \n            currentEpisode: 0 \n        });\n        await this.game.reset();\n        \n        if (resetNetwork) {\n            this.dqn.reset();\n        }\n    }\n\n    async handleInputChange(e) {\n        const target = e.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        await this.setStateAsync({ [name]: value });\n    }\n\n    async handleModeSelectChange(e) {\n        await this.handleInputChange(e);\n        await this.reset(false);\n    }\n\n    async handlePlayButtonPress() {\n        const epsilon = this.state.epsilon;\n        const updateTarget = this.state.updateTarget;\n        const maxSteps = this.state.maxSteps;\n        const episodes = this.state.episodes;\n        const batchSize = this.state.batchSize;\n        const epsilonMax = this.state.epsilonMax;\n        const epsilonMin = this.state.epsilonMin;\n\n        await this.setStateAsync({ running: true });\n\n        switch (this.state.mode) {\n            case 'step':\n                await this.singleStep(epsilon, updateTarget, batchSize);\n                break;\n\n            case 'episode':\n                await this.singleEpisode(maxSteps, epsilon, batchSize);\n                break;\n\n            case 'train':\n                await this.fullyTrain(episodes, maxSteps, batchSize, epsilonMax, epsilonMin);\n                this.dqn.updateTargetModel();\n                break;\n\n            default:\n                break;\n        }\n        await this.setStateAsync({ running: false });\n    }\n\n    async handleResetButtonPress() {\n        await this.reset(true);\n    }\n\n    async fullyTrain(episodes, maxSteps, batchSize, epsilonMax, epsilonMin) {\n        const epsDecay = (epsilonMax - epsilonMin) / episodes;\n        let epsilon = epsilonMax;\n\n        for (let episode = 0; episode < episodes && this.state.running; episode ++) {\n            await this.setStateAsync({ currentEpisode: episode + 1 });\n            await this.singleEpisode(maxSteps, epsilon, batchSize);\n\n            if (epsilon > epsilonMin) {\n                epsilon = (epsilonMax - epsilonMin) * Math.exp(-epsDecay * episode) + epsilonMin;\n            }\n        }\n    }\n\n    async singleEpisode(maxSteps, epsilon, batchSize) {\n        for (let step = 0; step < maxSteps && this.state.running; step ++) {\n            const transition = await this.dqn.step(this.game, epsilon);\n\n            await this.setStateAsync({ currentStep: step + 1 });\n            await sleep(this.state.stepDelay);\n            this.forceUpdate();\n\n            if (transition.done) {\n                break;\n            }\n        }\n        await this.game.reset();\n        await this.dqn.trainModel(batchSize);\n        this.dqn.updateTargetModel();\n    }\n\n    async singleStep(epsilon, updateTarget, batchSize) {\n        const step = await this.dqn.step(this.game, epsilon);\n\n        if (step.done) {\n            await this.game.reset();\n            await this.dqn.trainModel(batchSize);\n        }\n\n        if (updateTarget) {\n            this.dqn.updateTargetModel();\n        }\n    }\n\n    createControlsForMode() {\n        let controlsElements = [];\n\n        for (const el of controls[this.state.mode]) {\n            const props = el.props;\n            const label = el.label;\n            const tooltip = el.tooltip;\n\n            controlsElements.push(this.createLabel(label, props.name, tooltip));\n            controlsElements.push(this.createInput(props));\n        }\n\n        return <div id=\"mode-controls\">\n            {controlsElements}\n        </div>\n    }\n\n    createLabel(labelText, labelFor, tooltip) {\n        return <label \n                className=\"control\" \n                htmlFor={labelFor}\n                title={tooltip}\n                id={labelFor + '-label'} \n                key={labelFor + \"-label\"}>{labelText + ':'}&nbsp;\n            </label>\n    }\n\n    createInput(props) {\n        const name = props.name;\n        const className = \"control labeled\";\n        const onChange = this.handleInputChange;\n        const value = this.state[name];\n        const key = name + '-input';\n\n        let elementProps = {\n            ...props, \n            className,\n            onChange,\n            value,\n            key\n        };\n        return React.createElement('input', elementProps);\n    }\n\n    showCurrentStep() {\n        const mode = this.state.mode;\n        return mode === 'episode' || mode === 'train';\n    }\n\n    showCurrentEpisode() {\n        return this.state.mode === 'train';\n    }\n\n    render() {\n        return <div>\n            <div id=\"controls-container\">\n                <div id=\"controls-box\">\n                    <div id=\"static-controls\">\n                        <select className=\"control\" id=\"mode-select\" name=\"mode\" title=\"Mode select\" \n                            onChange={this.handleModeSelectChange} defaultValue=\"step\">\n                            <option value=\"step\">Single Step</option>\n                            <option value=\"episode\">Single Episode</option>\n                            <option value=\"train\">Multiple Episodes</option>\n                        </select>\n                        <button \n                            className=\"control\" \n                            id=\"play-button\" \n                            title=\"Run\"\n                            disabled={this.state.running}\n                            onClick={this.handlePlayButtonPress}>▶\n                        </button>\n                        <button \n                            className=\"control\" \n                            id=\"reset-button\" \n                            title=\"Reset\" \n                            disabled={this.state.running}\n                            onClick={this.handleResetButtonPress}>↺\n                        </button>\n                        <input \n                            className=\"control\"\n                            name=\"stepDelay\"\n                            id=\"step-delay-input\"\n                            title=\"Delay Between Steps (ms)\"\n                            onChange={this.handleInputChange}\n                            value={this.state.stepDelay}\n                            type=\"number\"\n                            max=\"5000\"\n                            min=\"100\"\n                            step=\"100\">\n                        </input>\n                    </div>\n                    {this.createControlsForMode()}\n                </div>\n            </div>\n            <div id=\"game-container\">\n                <FrozenLake ref={this.gameRef} />\n            </div>\n        </div>\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}