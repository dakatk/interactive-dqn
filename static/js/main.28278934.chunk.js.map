{"version":3,"sources":["game/util/Step.js","game/FrozenLake.jsx","game/util/rl/Dqn.js","util/Sleep.js","App.jsx","index.jsx"],"names":["Transition","action","state","reward","done","nextState","allowedActions","this","Action","enumKey","DOWN","UP","RIGHT","LEFT","console","error","ordinal","Enumify","_","closeEnum","FrozenLake","props","board","Object","freeze","location","prevAction","setState","opposite","stateX","stateY","Math","floor","push","a","prevState","stateAsTensor","includes","cell","oneHot","tf","cells","i","className","styleData","classes","title","titles","content","parseInt","id","React","Component","Dqn","bufferSize","gamma","reset","mainModel","add","dense","units","inputShape","activation","compile","loss","optimizer","targetModel","updateTargetModel","replayBuffer","game","epsilon","epsilonGreedy","step","transition","storeTransition","layers","weights","getWeights","setWeights","unshift","length","pop","actionSpace","random","randIndex","qValues","predict","argMax","dataSync","fromOrdinal","batchSize","miniBatch","targetQ","targetValue","expected","arraySync","enumOrdinal","fit","epochs","shuffle","clonedBuffer","Set","size","randomIndex","mainPred","targetPred","data","maxAction","sleep","ms","Promise","resolve","setTimeout","App","gameRef","createRef","mode","epsilonMax","epsilonMin","maxSteps","updateTarget","episodes","running","handleInputChange","bind","handlePlayButtonPress","handleResetButtonPress","current","dqn","params","e","target","value","type","checked","name","singleStep","singleEpisode","fullyTrain","epsDecay","episode","exp","forceUpdate","trainModel","controlsElements","controls","el","label","tooltip","createLabel","createInput","labelText","labelFor","htmlFor","onChange","key","elementProps","createElement","defaultValue","disabled","onClick","createControlsForMode","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28278934.chunk.js","sourcesContent":["import { Enumify } from \"enumify\";\n\nclass Transition {\n    constructor(action, state, reward, done, nextState, allowedActions) {\n        this.action = action;\n        this.state = state;\n        this.reward = reward;\n        this.done = done;\n        this.nextState = nextState;\n        this.allowedActions = allowedActions;\n    }\n}\n\nclass Action extends Enumify {\n    static UP = new Action();\n    static DOWN = new Action();\n    static LEFT = new Action();\n    static RIGHT = new Action();\n    static _ = this.closeEnum();\n\n    opposite() {\n        switch (this.enumKey) {\n            case 'UP': \n                return Action.DOWN;\n            case 'DOWN':\n                return Action.UP;\n            case 'LEFT':\n                return Action.RIGHT;\n            case 'RIGHT':\n                return Action.LEFT;\n            default:\n                console.error(`Action '${this.enumKey}' doesn't have an opposite`);\n                break;\n        }\n    }\n\n    static fromOrdinal(ordinal) {\n        switch (ordinal) {\n            case 0:\n                return Action.UP;\n            case 1:\n                return Action.DOWN;\n            case 2:\n                return Action.LEFT;\n            case 3:\n                return Action.RIGHT;\n            default:\n                console.error(`Not an Action: ${ordinal}`);\n                break;\n        }\n    }\n}\n\nexport {\n    Transition, Action\n}","/*eslint eqeqeq: \"off\"*/\n\nimport React from 'react';\nimport './FrozenLake.css';\nimport { Action, Transition } from './util/Step.js'\nimport * as tf from '@tensorflow/tfjs';\nimport styleData from './models/StyleData.json';\n\nexport default class FrozenLake extends React.Component {\n    board = Object.freeze([\n        'S', 'F', 'F', 'F',\n        'F', 'H', 'F', 'H',\n        'F', 'F', 'F', 'H',\n        'H', 'F', 'F', 'G'\n    ]);\n\n    constructor(props) {\n        super(props);\n\n        this.state = { location: 0 };\n        this.prevAction = Action.RIGHT; \n    }\n\n    componentDidMount() {}\n    componentWillUnmount() {}\n\n    reset() {\n        this.setState({ location: 0 });\n        this.prevAction = Action.RIGHT\n    }\n\n    allowedActions() {\n        let opposite = this.prevAction.opposite();\n        let location = this.state.location;\n        let stateX = location % 4;\n        let stateY = Math.floor(location / 4);\n\n        let allowedActions = [];\n\n        if (stateX > 0 && opposite !== Action.LEFT) {\n            allowedActions.push(Action.LEFT);\n        }\n        if (stateX < 3 && opposite !== Action.RIGHT) {\n            allowedActions.push(Action.RIGHT);\n        }\n        if (stateY > 0 && opposite !== Action.UP) {\n            allowedActions.push(Action.UP);\n        }\n        if (stateY < 3 && opposite !== Action.DOWN) {\n            allowedActions.push(Action.DOWN);\n        }\n        return allowedActions;\n    }\n\n    async step(action) {\n        let prevState = this.stateAsTensor();\n        let allowedActions = this.allowedActions();\n\n        if (!allowedActions.includes(action)) {\n            return new Transition(action, prevState, -1, true, prevState, allowedActions);\n        }\n        let location = this.state.location;\n        let stateX = location % 4;\n        let stateY = Math.floor(location / 4);\n\n        switch (action) {\n            case Action.UP:\n                stateY --;\n                break;\n\n            case Action.DOWN:\n                stateY ++;\n                break;\n\n            case Action.LEFT:\n                stateX --;\n                break;\n\n            case Action.RIGHT:\n                stateX ++;\n                break;\n            \n            default:\n                break;\n        }\n        await this.setState({ location: stateY * 4 + stateX });\n        this.prevAction = action;\n\n        return new Transition(action, prevState, this.reward(), this.done(), this.stateAsTensor(), allowedActions);\n    }\n\n    reward() {\n        let location = this.state.location;\n        switch (this.board[location]) {\n            case 'G':\n                return 1;\n            case 'H':\n                return -1;\n            case 'F':\n            case 'S':\n            default:\n                return 0;\n        }\n    }\n\n    done() {\n        let location = this.state.location;\n        let cell = this.board[location];\n        return cell === 'G' || cell === 'H';\n    }\n\n    stateAsTensor() {\n        let oneHot = [\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0\n        ];\n        let location = this.state.location;\n        oneHot[location] = 1;\n        \n        return tf.tensor2d([oneHot]);\n    }\n\n    render() {\n        let cells = [];\n        for (const i in this.board) {\n            const cell = this.board[i];\n            const className = styleData.classes[cell] + \" grid-item\";\n            const title = styleData.titles[cell];\n\n            let content;\n            if (i == this.state.location) {\n                content = '웃';\n            }\n            else {\n                content = cell;\n            }\n\n            cells.push(<div className={className} title={title} key={i}>{content}</div>);\n            if ((parseInt(i) + 1) % 4 === 0) {\n                cells.push(<br key={i + '-br'} />)\n            }\n        }\n        return <div id=\"frozen-lake-grid\">\n            {cells}\n        </div>\n    }\n}","/*eslint eqeqeq: \"off\"*/\n\nimport * as tf from '@tensorflow/tfjs';\nimport { Action } from '../Step';\n\nexport default class Dqn {\n    constructor(bufferSize, gamma) {\n        this.bufferSize = bufferSize;\n        this.gamma = gamma;\n        this.reset();\n    }\n\n    reset() {\n        this.mainModel = tf.sequential();\n        this.mainModel.add(tf.layers.dense({units: 4, inputShape: 16, activation: 'relu'}));\n        this.mainModel.compile({loss: 'meanSquaredError', optimizer: 'adam'});\n\n        this.targetModel = tf.sequential();\n        this.targetModel.add(tf.layers.dense({units: 4, inputShape: 16, activation: 'relu'}));\n\n        this.updateTargetModel();\n        this.replayBuffer = [];\n    }\n\n    async step(game, epsilon) {\n        const state = game.stateAsTensor();\n        const action = await this.epsilonGreedy(state, game.allowedActions(), epsilon);\n        const transition = await game.step(action);\n\n        this.storeTransition(transition);\n        return transition;\n    }\n\n    updateTargetModel() {\n        for (const i in this.mainModel.layers) {\n            const weights = this.mainModel.layers[i].getWeights();\n            this.targetModel.layers[i].setWeights(weights);\n        }\n    }\n\n    storeTransition(transition) {\n        this.replayBuffer.unshift(transition);\n\n        if (this.replayBuffer.length === this.bufferSize + 1) {\n            this.replayBuffer.pop();\n        }\n    }\n\n    async epsilonGreedy(state, actionSpace, epsilon) {\n        if (Math.random() < epsilon) {\n            const randIndex = Math.floor(Math.random() * actionSpace.length);\n            return actionSpace[randIndex];\n        }\n        const qValues = this.mainModel.predict(state);\n        const argMax = await qValues.argMax(-1).dataSync();\n\n        return Action.fromOrdinal(argMax[0]);\n    }\n\n    async trainModel(batchSize) {\n        if (this.replayBuffer.length < batchSize) {\n            return;\n        }\n\n        for (const transition of this.miniBatch(batchSize)) {\n            let targetQ = transition.reward;\n            if (!transition.done) {\n                targetQ += this.gamma * this.targetValue(transition.nextState);\n            }\n\n            let expected = this.mainModel.predict(transition.state).arraySync();\n            expected[0][transition.action.enumOrdinal] = targetQ;\n\n            await this.mainModel.fit(transition.state, tf.tensor2d(expected), { epochs: 1, batchSize: 1, shuffle: false });\n        }\n    }\n\n    miniBatch(batchSize) {\n        if (batchSize >= this.replayBuffer.length) {\n            let clonedBuffer = [...this.replayBuffer];\n            tf.util.shuffle(clonedBuffer);\n            return clonedBuffer;\n        }\n\n        const bufferSize = this.replayBuffer.length;\n        let miniBatch = new Set();\n\n        while (miniBatch.size != batchSize) {\n            const randomIndex = Math.floor(Math.random() * bufferSize);\n            miniBatch.add(this.replayBuffer[randomIndex]);\n        }\n        return miniBatch;\n    }\n\n    async targetValue(nextState) {\n        const mainPred = this.mainModel.predict(nextState);\n        const targetPred = this.targetModel.predict(nextState);\n        const maxAction = await mainPred.argMax(-1).data();\n\n        return targetPred.arraySync()[0][maxAction[0]];\n    }\n}","export default function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }","import React from 'react';\nimport './App.css';\nimport FrozenLake from './game/FrozenLake';\nimport Dqn from './game/util/rl/Dqn';\nimport controls from './models/Controls.json';\nimport params from './models/Params.json';\nimport sleep from './util/Sleep';\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.gameRef = React.createRef();\n        this.state = {\n            mode: 'step',\n            epsilon: 0.5,\n            epsilonMax: 1.0,\n            epsilonMin: 0.0,\n            maxSteps: 20,\n            updateTarget: false,\n            episodes: 1000,\n            batchSize: 32,\n            running: false\n        };\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handlePlayButtonPress = this.handlePlayButtonPress.bind(this);\n        this.handleResetButtonPress = this.handleResetButtonPress.bind(this);\n    }\n\n    componentDidMount() {\n        this.game = this.gameRef.current;\n        this.dqn = new Dqn(params.bufferSize, params.gamma);\n    }\n\n    handleInputChange(e) {\n        const target = e.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        this.setState({ [name]: value });\n    }\n\n    async handlePlayButtonPress() {\n        const epsilon = this.state.epsilon;\n        const updateTarget = this.state.updateTarget;\n        const maxSteps = this.state.maxSteps;\n        const episodes = this.state.episodes;\n        const batchSize = this.state.batchSize;\n        const epsilonMax = this.state.epsilonMax;\n        const epsilonMin = this.state.epsilonMin;\n\n        await this.setState({ running: true });\n\n        switch (this.state.mode) {\n            case 'step':\n                await this.singleStep(epsilon, updateTarget, batchSize);\n                break;\n\n            case 'episode':\n                await this.singleEpisode(maxSteps, epsilon, batchSize);\n                break;\n\n            case 'train':\n                await this.fullyTrain(episodes, maxSteps, batchSize, epsilonMax, epsilonMin);\n                this.dqn.updateTargetModel();\n                break;\n\n            default:\n                break;\n        }\n        await this.setState({ running: false });\n    }\n\n    async fullyTrain(episodes, maxSteps, batchSize, epsilonMax, epsilonMin) {\n        const epsDecay = (epsilonMax - epsilonMin) / episodes;\n        let epsilon = epsilonMax;\n\n        for (let episode = 0; episode < episodes && this.state.running; episode ++) {\n            await this.singleEpisode(maxSteps, epsilon, batchSize);\n\n            if (epsilon > epsilonMin) {\n                epsilon = (epsilonMax - epsilonMin) * Math.exp(-epsDecay * episode) + epsilonMin;\n            }\n        }\n    }\n\n    async singleEpisode(maxSteps, epsilon, batchSize) {\n        for (let i = 0; i < maxSteps && this.state.running; i ++) {\n            const transition = await this.dqn.step(this.game, epsilon);\n\n            await sleep(1000);\n            this.forceUpdate();\n\n            if (transition.done) {\n                break;\n            }\n        }\n        this.game.reset();\n        await this.dqn.trainModel(batchSize);\n        this.dqn.updateTargetModel();\n    }\n\n    async singleStep(epsilon, updateTarget, batchSize) {\n        const step = await this.dqn.step(this.game, epsilon);\n\n        if (step.done) {\n            this.game.reset();\n            await this.dqn.trainModel(batchSize);\n        }\n\n        if (updateTarget) {\n            this.dqn.updateTargetModel();\n        }\n    }\n\n    handleResetButtonPress() {\n        this.game.reset();\n        this.dqn.reset();\n    }\n\n    createControlsForMode() {\n        let controlsElements = [];\n\n        for (const el of controls[this.state.mode]) {\n            const props = el.props;\n            const label = el.label;\n            const tooltip = el.tooltip;\n\n            controlsElements.push(this.createLabel(label, props.name, tooltip));\n            controlsElements.push(this.createInput(props));\n        }\n\n        return <div id=\"mode-controls\">\n            {controlsElements}\n        </div>\n    }\n\n    createLabel(labelText, labelFor, tooltip) {\n        return <label \n                className=\"control\" \n                htmlFor={labelFor}\n                title={tooltip}\n                id={labelFor + '-label'} \n                key={labelFor + \"-label\"}>{labelText + ':'} \n            </label>\n    }\n\n    createInput(props) {\n        const name = props.name;\n        const className = \"control labeled\";\n        const onChange = this.handleInputChange;\n        const value = this.state[name];\n        const key = name + '-input';\n\n        let elementProps = {\n            ...props, \n            className,\n            onChange,\n            value,\n            key\n        };\n        return React.createElement('input', elementProps);\n    }\n\n    render() {\n        return <div>\n            <div id=\"controls-container\">\n                <div id=\"controls-box\">\n                    <div id=\"static-controls\">\n                        <select className=\"control\" id=\"mode-select\" name=\"mode\" title=\"Mode select\" \n                            onChange={this.handleInputChange} defaultValue=\"step\">\n                            <option value=\"step\">Single Step</option>\n                            <option value=\"episode\">Single Episode</option>\n                            <option value=\"train\">Full Training</option>\n                        </select>\n                        <button \n                            className=\"control\" \n                            id=\"play-button\" \n                            title=\"Run\"\n                            disabled={this.state.running}\n                            onClick={this.handlePlayButtonPress}>▶\n                        </button>\n                        <button \n                            className=\"control\" \n                            id=\"reset-button\" \n                            title=\"Reset\" \n                            disabled={this.state.running}\n                            onClick={this.handleResetButtonPress}>↺\n                        </button>\n                    </div>\n                    {this.createControlsForMode()}\n                </div>\n            </div>\n            <div id=\"game-container\">\n                <FrozenLake ref={this.gameRef} />\n            </div>\n        </div>\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}