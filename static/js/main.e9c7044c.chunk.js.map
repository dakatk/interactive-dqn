{"version":3,"sources":["app/App.jsx","util/Step.js","util/AsyncComponent.js","app/frozen-lake/board/cell/Cell.jsx","app/frozen-lake/board/Board.jsx","app/frozen-lake/FrozenLake.jsx","app/controls/Controls.jsx","app/counter/Counter.jsx","util/rl/Dqn.js","util/Sleep.js","util/rl/Trainer.js","app/game/Game.jsx","index.jsx"],"names":["App","id","to","React","Component","Transition","action","state","reward","done","nextState","allowedActions","this","Action","enumKey","DOWN","UP","RIGHT","LEFT","console","error","ordinal","Enumify","_","closeEnum","AsyncComponent","newState","Promise","resolve","setState","Cell","type","props","className","StylesModel","classes","join","tooltip","titles","content","populated","title","Board","cells","i","boardData","index","parseInt","location","push","rowSize","FrozenLake","board","Object","freeze","prevAction","a","setStateAsync","opposite","stateX","stateY","Math","floor","prevState","stateAsTensor","includes","cell","oneHot","tf","Controls","mode","epsilon","epsilonMax","epsilonMin","maxSteps","updateTarget","episodes","batchSize","running","stepDelay","handleInputChange","bind","handleModeSelectChange","handlePlayButtonPress","handleResetButtonPress","e","target","value","checked","name","onModeSelect","onPlay","currentStep","currentEpisode","onReset","controlsElements","ControlsModel","el","label","createLabel","createInput","labelText","labelFor","htmlFor","onChange","key","elementProps","createElement","defaultValue","disabled","onClick","max","min","step","createControlsForMode","Counter","episode","style","clear","showCurrentStep","showCurrentEpisode","Dqn","bufferSize","gamma","layers","reset","mainModel","layer","add","dense","compile","loss","optimizer","targetModel","updateTargetModel","replayBuffer","game","epsilonGreedy","transition","storeTransition","weights","getWeights","setWeights","unshift","length","pop","actionSpace","random","randIndex","qValues","predict","argMax","dataSync","fromOrdinal","miniBatch","targetQ","targetValue","expected","arraySync","enumOrdinal","fit","epochs","shuffle","clonedBuffer","Set","size","randomIndex","mainPred","targetPred","data","maxAction","sleep","ms","setTimeout","Trainer","dqn","component","epsDecay","singleEpisode","exp","forceUpdate","trainModel","Game","controlMode","params","ref","current","trainer","controlState","singleStep","fullyTrain","Index","frozenLakeRef","createRef","path","element","exact","ParamsModel","frozenLake","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.e9c7044c.chunk.js","sourcesContent":["import React from 'react';\nimport { Outlet, Link } from \"react-router-dom\";\nimport './App.css';\n\nexport default class App extends React.Component {\n    render() {\n        return <div>\n            <h1>Games To Learn</h1>\n            <nav id=\"app-nav\">\n                <Link to=\"/frozen-lake\">Frozen Lake</Link>\n            </nav>\n            <Outlet />\n        </div>\n    }\n}","import { Enumify } from \"enumify\";\n\nclass Transition {\n    constructor(action, state, reward, done, nextState, allowedActions) {\n        this.action = action;\n        this.state = state;\n        this.reward = reward;\n        this.done = done;\n        this.nextState = nextState;\n        this.allowedActions = allowedActions;\n    }\n}\n\nclass Action extends Enumify {\n    static UP = new Action();\n    static DOWN = new Action();\n    static LEFT = new Action();\n    static RIGHT = new Action();\n    static _ = this.closeEnum();\n\n    opposite() {\n        switch (this.enumKey) {\n            case 'UP': \n                return Action.DOWN;\n            case 'DOWN':\n                return Action.UP;\n            case 'LEFT':\n                return Action.RIGHT;\n            case 'RIGHT':\n                return Action.LEFT;\n            default:\n                console.error(`Action '${this.enumKey}' doesn't have an opposite`);\n                break;\n        }\n    }\n\n    static fromOrdinal(ordinal) {\n        switch (ordinal) {\n            case 0:\n                return Action.UP;\n            case 1:\n                return Action.DOWN;\n            case 2:\n                return Action.LEFT;\n            case 3:\n                return Action.RIGHT;\n            default:\n                console.error(`Not an Action: ${ordinal}`);\n                break;\n        }\n    }\n}\n\nexport {\n    Transition, Action\n}","import React from 'react';\n\nexport default class AsyncComponent extends React.Component {\n    setStateAsync(newState) {\n        return new Promise((resolve) => {\n            this.setState(newState, () => {\n                resolve();\n            });\n        });\n    }\n}","import React from 'react';\nimport StylesModel from './models/Styles.json';\nimport './Cell.css';\n\nexport default class Cell extends React.Component {\n    render() {\n        const type = this.props.type;\n        const className = [StylesModel.classes[type] || '', 'cell-grid-item'].join(' ');\n        const tooltip = StylesModel.titles[type];\n        const content = (this.props.populated && '웃') || type;\n\n        return <div className={className} title={tooltip}>{content}</div>\n    }\n}","import React from 'react';\nimport Cell from './cell/Cell';\nimport './Board.css';\n\nexport default class Board extends React.Component {\n    render() {\n        let cells = [];\n        for (const i in this.props.boardData) {\n            const type = this.props.boardData[i];\n            const index = parseInt(i);\n            const populated = index  === this.props.location;\n            \n            cells.push(<Cell type={type} populated={populated} key={i} />);\n            if ((index + 1) % this.props.rowSize === 0) {\n                cells.push(<br key={`${i}-br`} />)\n            }\n        }\n        return <div id=\"board-grid\">\n            {cells}\n        </div>\n    }\n}","import * as tf from '@tensorflow/tfjs';\nimport React from 'react';\nimport { Action, Transition } from '../../util/Step';\nimport AsyncComponent from '../../util/AsyncComponent';\nimport Board from './board/Board';\nimport './FrozenLake.css';\n\nexport default class FrozenLake extends AsyncComponent {\n    board = Object.freeze([\n        'S', 'F', 'F', 'F',\n        'F', 'H', 'F', 'H',\n        'F', 'F', 'F', 'H',\n        'H', 'F', 'F', 'G'\n    ]);\n\n    constructor(props) {\n        super(props);\n\n        this.state = { location: 0 };\n        this.prevAction = Action.RIGHT; \n    }\n\n    componentDidMount() {}\n    componentWillUnmount() {}\n\n    async reset() {\n        await this.setStateAsync({ location: 0 });\n        this.prevAction = Action.RIGHT\n    }\n\n    allowedActions() {\n        let opposite = this.prevAction.opposite();\n        let location = this.state.location;\n        \n        let stateX = location % 4;\n        let stateY = Math.floor(location / 4);\n\n        let allowedActions = [];\n\n        if (stateX > 0 && opposite !== Action.LEFT) {\n            allowedActions.push(Action.LEFT);\n        }\n        if (stateX < 3 && opposite !== Action.RIGHT) {\n            allowedActions.push(Action.RIGHT);\n        }\n        if (stateY > 0 && opposite !== Action.UP) {\n            allowedActions.push(Action.UP);\n        }\n        if (stateY < 3 && opposite !== Action.DOWN) {\n            allowedActions.push(Action.DOWN);\n        }\n        return allowedActions;\n    }\n\n    async step(action) {\n        let prevState = this.stateAsTensor();\n        let allowedActions = this.allowedActions();\n\n        if (!allowedActions.includes(action)) {\n            return new Transition(action, prevState, -1, true, prevState, allowedActions);\n        }\n        let location = this.state.location;\n        let stateX = location % 4;\n        let stateY = Math.floor(location / 4);\n\n        switch (action) {\n            case Action.UP:\n                stateY --;\n                break;\n\n            case Action.DOWN:\n                stateY ++;\n                break;\n\n            case Action.LEFT:\n                stateX --;\n                break;\n\n            case Action.RIGHT:\n                stateX ++;\n                break;\n            \n            default:\n                break;\n        }\n        await this.setStateAsync({ location: stateY * 4 + stateX });\n        this.prevAction = action;\n\n        return new Transition(action, prevState, this.reward(), this.done(), this.stateAsTensor(), allowedActions);\n    }\n\n    reward() {\n        let location = this.state.location;\n        switch (this.board[location]) {\n            case 'G':\n                return 1;\n            case 'H':\n                return -1;\n            case 'F':\n            case 'S':\n            default:\n                return 0;\n        }\n    }\n\n    done() {\n        let location = this.state.location;\n        let cell = this.board[location];\n        return cell === 'G' || cell === 'H';\n    }\n\n    stateAsTensor() {\n        let oneHot = [\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0\n        ];\n        let location = this.state.location;\n        oneHot[location] = 1;\n        \n        return tf.tensor2d([oneHot]);\n    }\n\n    render() {\n        return <Board boardData={this.board} location={this.state.location} rowSize={4} />\n    }\n}","import React from \"react\";\nimport AsyncComponent from \"../../util/AsyncComponent\";\nimport ControlsModel from './models/Controls.json';\nimport './Controls.css';\n\nexport default class Controls extends AsyncComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mode: 'step',\n            epsilon: 0.5,\n            epsilonMax: 1.0,\n            epsilonMin: 0.0,\n            maxSteps: 20,\n            updateTarget: false,\n            episodes: 1000,\n            batchSize: 32,\n            running: false,\n            stepDelay: 500\n        };\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleModeSelectChange = this.handleModeSelectChange.bind(this);\n        this.handlePlayButtonPress = this.handlePlayButtonPress.bind(this);\n        this.handleResetButtonPress = this.handleResetButtonPress.bind(this);\n    }\n\n    async handleInputChange(e) {\n        const target = e.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        await this.setStateAsync({ [name]: value });\n    }\n\n    async handleModeSelectChange(e) {\n        await this.handleInputChange(e);\n        await this.props.onModeSelect(this.state.mode);\n    }\n\n    async handlePlayButtonPress() {\n        await this.setStateAsync({ running: true });\n        await this.props.onPlay(Object.freeze({...this.state}));\n        await this.setStateAsync({ running: false });\n    }\n\n    async handleResetButtonPress() {\n        await this.setStateAsync({ \n            running: false, \n            currentStep: 0, \n            currentEpisode: 0 \n        });\n        await this.props.onReset();\n    }\n\n    createControlsForMode() {\n        let controlsElements = [];\n        for (const el of ControlsModel[this.state.mode]) {\n            const props = el.props;\n            const label = el.label;\n            const name = props.name;\n            const tooltip = props.title;\n\n            controlsElements.push(this.createLabel(label, name, tooltip));\n            controlsElements.push(this.createInput(props));\n        }\n\n        return <div id=\"mode-controls\">\n            {controlsElements}\n        </div>\n    }\n\n    createLabel(labelText, labelFor, tooltip) {\n        return <label \n                className=\"control\" \n                htmlFor={labelFor}\n                title={tooltip}\n                id={`${labelFor}-label`} \n                key={`${labelFor}-label`}>{`${labelText}:`}&nbsp;\n            </label>\n    }\n\n    createInput(props) {\n        const name = props.name;\n        const className = \"control labeled\";\n        const onChange = this.handleInputChange;\n        const value = this.state[name];\n        const key = name + '-input';\n\n        let elementProps = {\n            ...props, \n            className,\n            onChange,\n            value,\n            key\n        };\n        return React.createElement('input', elementProps);\n    }\n\n    render() {\n        return <div id=\"controls-box\">\n                <div id=\"static-controls\">\n                    <select className=\"control\" id=\"mode-select\" name=\"mode\" title=\"Mode select\" \n                        onChange={this.handleModeSelectChange} defaultValue=\"step\">\n                        <option value=\"step\">Single Step</option>\n                        <option value=\"episode\">Single Episode</option>\n                        <option value=\"train\">Multiple Episodes</option>\n                    </select>\n                    <button \n                        className=\"control\" \n                        id=\"play-button\" \n                        title=\"Run\"\n                        disabled={this.state.running}\n                        onClick={this.handlePlayButtonPress}>▶\n                    </button>\n                    <button \n                        className=\"control\" \n                        id=\"reset-button\" \n                        title=\"Reset\" \n                        disabled={this.state.running}\n                        onClick={this.handleResetButtonPress}>↺\n                    </button>\n                    <label\n                        className=\"control\"\n                        htmlFor=\"stepDelay\"\n                        id=\"step-delay-label\"\n                        title=\"Delay between steps (ms)\">Delay:&nbsp;\n                    </label>\n                    <input \n                        className=\"control labeled\"\n                        name=\"stepDelay\"\n                        id=\"stepDelay\"\n                        title=\"Delay between steps (ms)\"\n                        onChange={this.handleInputChange}\n                        value={this.state.stepDelay}\n                        type=\"number\"\n                        max=\"5000\"\n                        min=\"100\"\n                        step=\"100\">\n                    </input>\n                </div>\n                {this.createControlsForMode()}\n            </div>\n    }\n}","import React from 'react';\nimport './Counter.css';\n\nexport default class Counter extends React.Component {\n    showCurrentStep() {\n        const mode = this.props.mode;\n        if (mode === 'episode' || mode === 'train') {\n            return <h3 id=\"counter-step\">Step: {this.props.step}</h3>\n        }\n    }\n\n    showCurrentEpisode() {\n        if (this.props.mode === 'train') {\n            return <h3 id=\"counter-episode\">Episode: {this.props.episode}</h3>\n        }\n    }\n\n    render() {\n        return <div style={{clear: 'both'}} id=\"counter-counts\">\n            {this.showCurrentStep()}\n            {this.showCurrentEpisode()}\n        </div>\n    }\n}","/*eslint eqeqeq: \"off\"*/\n\nimport * as tf from '@tensorflow/tfjs';\nimport { Action } from '../Step';\n\nexport default class Dqn {\n    constructor(bufferSize, gamma, layers) {\n        this.bufferSize = bufferSize;\n        this.gamma = gamma;\n        this.layers = layers;\n        this.reset();\n    }\n\n    reset() {\n        this.mainModel = tf.sequential();\n        for (const layer of this.layers) {\n            this.mainModel.add(tf.layers.dense(layer));\n        }\n        this.mainModel.compile({loss: 'meanSquaredError', optimizer: 'adam'});\n\n        this.targetModel = tf.sequential();\n        for (const layer of this.layers) {\n            this.targetModel.add(tf.layers.dense(layer));\n        }\n        this.updateTargetModel();\n        this.replayBuffer = [];\n    }\n\n    async step(game, epsilon) {\n        const state = game.stateAsTensor();\n        const action = await this.epsilonGreedy(state, game.allowedActions(), epsilon);\n        const transition = await game.step(action);\n\n        this.storeTransition(transition);\n        return transition;\n    }\n\n    updateTargetModel() {\n        for (const i in this.mainModel.layers) {\n            const weights = this.mainModel.layers[i].getWeights();\n            this.targetModel.layers[i].setWeights(weights);\n        }\n    }\n\n    storeTransition(transition) {\n        this.replayBuffer.unshift(transition);\n\n        if (this.replayBuffer.length === this.bufferSize + 1) {\n            this.replayBuffer.pop();\n        }\n    }\n\n    async epsilonGreedy(state, actionSpace, epsilon) {\n        if (Math.random() < epsilon) {\n            const randIndex = Math.floor(Math.random() * actionSpace.length);\n            return actionSpace[randIndex];\n        }\n        const qValues = this.mainModel.predict(state);\n        const argMax = await qValues.argMax(-1).dataSync();\n\n        return Action.fromOrdinal(argMax[0]);\n    }\n\n    async trainModel(batchSize) {\n        if (this.replayBuffer.length < batchSize) {\n            return;\n        }\n\n        for (const transition of this.miniBatch(batchSize)) {\n            let targetQ = transition.reward;\n            if (!transition.done) {\n                targetQ += this.gamma * this.targetValue(transition.nextState);\n            }\n\n            let expected = this.mainModel.predict(transition.state).arraySync();\n            expected[0][transition.action.enumOrdinal] = targetQ;\n\n            await this.mainModel.fit(transition.state, tf.tensor2d(expected), { epochs: 1, batchSize: 1, shuffle: false });\n        }\n    }\n\n    miniBatch(batchSize) {\n        if (batchSize >= this.replayBuffer.length) {\n            let clonedBuffer = [...this.replayBuffer];\n            tf.util.shuffle(clonedBuffer);\n            return clonedBuffer;\n        }\n\n        const bufferSize = this.replayBuffer.length;\n        let miniBatch = new Set();\n\n        while (miniBatch.size != batchSize) {\n            const randomIndex = Math.floor(Math.random() * bufferSize);\n            miniBatch.add(this.replayBuffer[randomIndex]);\n        }\n        return miniBatch;\n    }\n\n    async targetValue(nextState) {\n        const mainPred = this.mainModel.predict(nextState);\n        const targetPred = this.targetModel.predict(nextState);\n        const maxAction = await mainPred.argMax(-1).data();\n\n        return targetPred.arraySync()[0][maxAction[0]];\n    }\n}","export default function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, parseInt(ms)));\n  }","import Dqn from './Dqn';\nimport sleep from '../Sleep'\n\nexport default class Trainer {\n    constructor(bufferSize, gamma, layers) {\n        this.dqn = new Dqn(bufferSize, gamma, layers);\n    }\n\n    async fullyTrain(component, episodes, maxSteps, batchSize, epsilonMax, epsilonMin, stepDelay) {\n        const epsDecay = (epsilonMax - epsilonMin) / episodes;\n        let epsilon = epsilonMax;\n\n        for (let episode = 0; episode < episodes; episode ++) {\n            await component.setStateAsync({ currentEpisode: episode + 1 });\n            await this.singleEpisode(component, maxSteps, epsilon, batchSize, stepDelay);\n\n            if (epsilon > epsilonMin) {\n                epsilon = (epsilonMax - epsilonMin) * Math.exp(-epsDecay * episode) + epsilonMin;\n            }\n        }\n        this.dqn.updateTargetModel();\n    }\n\n    async singleEpisode(component, maxSteps, epsilon, batchSize, stepDelay) {\n        for (let step = 0; step < maxSteps; step ++) {\n            const transition = await this.dqn.step(component.game, epsilon);\n\n            await component.setStateAsync({ currentStep: step + 1 });\n            await sleep(stepDelay);\n            component.forceUpdate();\n\n            if (transition.done) {\n                break;\n            }\n        }\n        await component.game.reset();\n        await this.dqn.trainModel(batchSize);\n        this.dqn.updateTargetModel();\n    }\n\n    async singleStep(component, epsilon, updateTarget, batchSize) {\n        const step = await this.dqn.step(component.game, epsilon);\n\n        if (step.done) {\n            await component.game.reset();\n            await this.dqn.trainModel(batchSize);\n        }\n        if (updateTarget) {\n            this.dqn.updateTargetModel();\n        }\n    }\n\n    reset() {\n        this.dqn.reset();\n    }\n}","import AsyncComponent from '../../util/AsyncComponent';\nimport Controls from '../controls/Controls';\nimport Counter from '../counter/Counter';\nimport Trainer from '../../util/rl/Trainer';\nimport './Game.css';\n\nexport default class Game extends AsyncComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = { \n            currentStep: 0, \n            currentEpisode: 0, \n            controlMode: 'step' \n        };\n        this.onPlay = this.onPlay.bind(this);\n        this.onReset = this.onReset.bind(this);\n        this.onModeSelect = this.onModeSelect.bind(this);\n    }\n\n    componentDidMount() {\n        const params = this.props.params;\n        this.game = this.props.component.ref.current;\n        this.trainer = new Trainer(params.bufferSize, params.gamma, params.layers);\n    }\n\n    async onPlay(controlState) {\n        switch (controlState.mode) {\n            case 'step':\n                await this.trainer.singleStep(this,\n                    controlState.epsilon, \n                    controlState.updateTarget, \n                    controlState.batchSize\n                );\n                break;\n\n            case 'episode':\n                await this.trainer.singleEpisode(this,\n                    controlState.maxSteps, \n                    controlState.epsilon, \n                    controlState.batchSize,\n                    controlState.stepDelay\n                );\n                break;\n\n            case 'train':\n                await this.trainer.fullyTrain(this,\n                    controlState.episodes, \n                    controlState.maxSteps, \n                    controlState.batchSize, \n                    controlState.epsilonMax, \n                    controlState.epsilonMin,\n                    controlState.stepDelay\n                );\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    async onReset() {\n        await this.setStateAsync({ \n            currentStep: 0, \n            currentEpisode: 0 \n        });\n        await this.game.reset();\n        this.trainer.reset();\n    }\n\n    async onModeSelect(mode) {\n        await this.setStateAsync({ \n            currentStep: 0, \n            currentEpisode: 0,\n            controlMode: mode\n        });\n        await this.game.reset();\n    }\n\n    render() {\n        return <div>\n            <div id=\"game-controls-container\">\n                <Controls \n                    onPlay={this.onPlay} \n                    onReset={this.onReset} \n                    onModeSelect={this.onModeSelect}\n                />\n            </div>\n            <div id=\"game-container\">\n                {this.props.component}\n            </div>\n            <div id=\"game-counter-container\">\n                <Counter \n                    mode={this.state.controlMode} \n                    step={this.state.currentStep} \n                    episode={this.state.currentEpisode} \n                />\n            </div>\n        </div>\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport App from './app/App';\nimport FrozenLake from './app/frozen-lake/FrozenLake';\nimport Game from './app/game/Game';\nimport ParamsModel from './models/Params.json';\nimport './index.css';\n\nclass Index extends React.Component {\n    constructor(props) {\n        super(props);\n        this.frozenLakeRef = React.createRef();\n    }\n\n    render() {\n        return <BrowserRouter>\n            <Routes>\n                <Route path=\"/\" element={<App />} />\n                <Route exact path=\"/frozen-lake\" element={\n                    <Game\n                        params={ParamsModel.frozenLake}\n                        component={<FrozenLake ref={this.frozenLakeRef}/>}\n                    />}\n                />\n            </Routes>\n        </BrowserRouter>\n    }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Index />, rootElement);\n"],"sourceRoot":""}